
e:/dev/Suga/Hardware/Multi_Temp/target/2.3.0/argon/Multi_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000028b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000014  2003f400  000d68d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e5c8  000d68e4  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b4  2003e640  2003e640  0002e640  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d6958  000d6958  00026958  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6980  000d6980  00026980  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013bc76  00000000  00000000  00026984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015117  00000000  00000000  001625fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000245cf  00000000  00000000  00177711  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002498  00000000  00000000  0019bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006930  00000000  00000000  0019e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000384b9  00000000  00000000  001a4aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003475b  00000000  00000000  001dcf61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103046  00000000  00000000  002116bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006328  00000000  00000000  00314704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fab5 	bl	d65a0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fabd 	bl	d65bc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e5c8 	.word	0x2003e5c8
   d404c:	000d68e4 	.word	0x000d68e4
   d4050:	2003e63c 	.word	0x2003e63c
   d4054:	2003e640 	.word	0x2003e640
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fa01 	bl	d5468 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d68a4 	.word	0x000d68a4
   d4080:	000d68c8 	.word	0x000d68c8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82a 	b.w	d40dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f92f 	bl	d42ec <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 b9a1 	b.w	d53d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bee7 	b.w	d4e68 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bee5 	b.w	d4e68 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 beeb 	b.w	d4e78 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40b4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d40b6:	4607      	mov	r7, r0
   d40b8:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d40ba:	da0c      	bge.n	d40d6 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
   d40bc:	2a0a      	cmp	r2, #10
   d40be:	d10a      	bne.n	d40d6 <_ZN5Print5printIiLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d40c0:	212d      	movs	r1, #45	; 0x2d
   d40c2:	f000 ff7f 	bl	d4fc4 <_ZN5Print5printEc>
            val = -n;
   d40c6:	4261      	negs	r1, r4
            t = print('-');
   d40c8:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d40ca:	b2f2      	uxtb	r2, r6
   d40cc:	4638      	mov	r0, r7
   d40ce:	f000 ff92 	bl	d4ff6 <_ZN5Print11printNumberEmh>
    }
}
   d40d2:	4428      	add	r0, r5
   d40d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d40d6:	4621      	mov	r1, r4
        size_t t = 0;
   d40d8:	2500      	movs	r5, #0
   d40da:	e7f6      	b.n	d40ca <_ZN5Print5printIiLi0EEEjT_i.part.0+0x18>

000d40dc <setup>:

const int nSENSORS = 2;
float celsius[nSENSORS] = {NAN, NAN};
retained uint8_t sensorAddresses[nSENSORS][8];

void setup() {
   d40dc:	b538      	push	{r3, r4, r5, lr}
  pinMode(pinLED, OUTPUT);
   d40de:	2101      	movs	r1, #1
   d40e0:	2007      	movs	r0, #7
   d40e2:	f001 fce7 	bl	d5ab4 <pinMode>

  pinMode(dsGND, OUTPUT);
   d40e6:	2101      	movs	r1, #1
   d40e8:	2003      	movs	r0, #3
   d40ea:	f001 fce3 	bl	d5ab4 <pinMode>
  digitalWrite(dsGND, LOW);
   d40ee:	2100      	movs	r1, #0
   d40f0:	2003      	movs	r0, #3
   d40f2:	f001 fcf0 	bl	d5ad6 <digitalWrite>
  pinMode(dsVCC, OUTPUT);
   d40f6:	2101      	movs	r1, #1
   d40f8:	2002      	movs	r0, #2
   d40fa:	f001 fcdb 	bl	d5ab4 <pinMode>
  digitalWrite(dsVCC, HIGH);

  delay(1000);

  ds18b20.resetsearch();                 // initialise for sensor search
   d40fe:	4c0c      	ldr	r4, [pc, #48]	; (d4130 <setup+0x54>)
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addresses
    ds18b20.search(sensorAddresses[i]); // and if available store
   d4100:	4d0c      	ldr	r5, [pc, #48]	; (d4134 <setup+0x58>)
  digitalWrite(dsVCC, HIGH);
   d4102:	2101      	movs	r1, #1
   d4104:	2002      	movs	r0, #2
   d4106:	f001 fce6 	bl	d5ad6 <digitalWrite>
  delay(1000);
   d410a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d410e:	f001 f937 	bl	d5380 <delay>
  ds18b20.resetsearch();                 // initialise for sensor search
   d4112:	4620      	mov	r0, r4
   d4114:	f000 fbc6 	bl	d48a4 <_ZN7DS18B2011resetsearchEv>
    ds18b20.search(sensorAddresses[i]); // and if available store
   d4118:	4629      	mov	r1, r5
   d411a:	4620      	mov	r0, r4
   d411c:	f000 fbaf 	bl	d487e <_ZN7DS18B206searchEPh>
   d4120:	f105 0108 	add.w	r1, r5, #8
   d4124:	4620      	mov	r0, r4
  }
}
   d4126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ds18b20.search(sensorAddresses[i]); // and if available store
   d412a:	f000 bba8 	b.w	d487e <_ZN7DS18B206searchEPh>
   d412e:	bf00      	nop
   d4130:	2003e648 	.word	0x2003e648
   d4134:	2003f400 	.word	0x2003f400

000d4138 <_Z11showAddressPhb>:
  }

  return _temp;
}

void showAddress(uint8_t addr[8], bool lf) {
   d4138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     
    for (int x = 0; x < 8; x++) {
        Serial.print(addr[x], HEX);
        if (x != 7)
        {
            Serial.print("-");
   d413a:	4f0e      	ldr	r7, [pc, #56]	; (d4174 <_Z11showAddressPhb+0x3c>)
void showAddress(uint8_t addr[8], bool lf) {
   d413c:	4606      	mov	r6, r0
   d413e:	460d      	mov	r5, r1
    for (int x = 0; x < 8; x++) {
   d4140:	2400      	movs	r4, #0
        Serial.print(addr[x], HEX);
   d4142:	f001 fa8f 	bl	d5664 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4146:	5d31      	ldrb	r1, [r6, r4]
   d4148:	2210      	movs	r2, #16
   d414a:	f000 ff54 	bl	d4ff6 <_ZN5Print11printNumberEmh>
        if (x != 7)
   d414e:	2c07      	cmp	r4, #7
   d4150:	d004      	beq.n	d415c <_Z11showAddressPhb+0x24>
            Serial.print("-");
   d4152:	f001 fa87 	bl	d5664 <_Z16_fetch_usbserialv>
   d4156:	4639      	mov	r1, r7
   d4158:	f000 ff30 	bl	d4fbc <_ZN5Print5printEPKc>
    for (int x = 0; x < 8; x++) {
   d415c:	3401      	adds	r4, #1
   d415e:	2c08      	cmp	r4, #8
   d4160:	d1ef      	bne.n	d4142 <_Z11showAddressPhb+0xa>
        }
    }
    
    if (lf) {
   d4162:	b135      	cbz	r5, d4172 <_Z11showAddressPhb+0x3a>
        Serial.println("");
   d4164:	f001 fa7e 	bl	d5664 <_Z16_fetch_usbserialv>
    }
}
   d4168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        Serial.println("");
   d416c:	4902      	ldr	r1, [pc, #8]	; (d4178 <_Z11showAddressPhb+0x40>)
   d416e:	f000 bf38 	b.w	d4fe2 <_ZN5Print7printlnEPKc>
}
   d4172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4174:	000d6704 	.word	0x000d6704
   d4178:	000d6708 	.word	0x000d6708
   d417c:	00000000 	.word	0x00000000

000d4180 <_Z7getTempPh>:
double getTemp(uint8_t addr[8]) {
   d4180:	b570      	push	{r4, r5, r6, lr}
   d4182:	ed2d 8b02 	vpush	{d8}
    _temp = ds18b20.getTemperature(addr);
   d4186:	4e22      	ldr	r6, [pc, #136]	; (d4210 <_Z7getTempPh+0x90>)
double getTemp(uint8_t addr[8]) {
   d4188:	b082      	sub	sp, #8
   d418a:	4604      	mov	r4, r0
  int   i = 0;
   d418c:	2500      	movs	r5, #0
    _temp = ds18b20.getTemperature(addr);
   d418e:	2200      	movs	r2, #0
   d4190:	4621      	mov	r1, r4
   d4192:	4630      	mov	r0, r6
   d4194:	f000 fb8a 	bl	d48ac <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d4198:	4630      	mov	r0, r6
    _temp = ds18b20.getTemperature(addr);
   d419a:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d419e:	f000 fc61 	bl	d4a64 <_ZN7DS18B208crcCheckEv>
   d41a2:	ed9d 0a01 	vldr	s0, [sp, #4]
   d41a6:	b950      	cbnz	r0, d41be <_Z7getTempPh+0x3e>
   d41a8:	3501      	adds	r5, #1
   d41aa:	2d04      	cmp	r5, #4
   d41ac:	d1ef      	bne.n	d418e <_Z7getTempPh+0xe>
    Serial.println("Invalid reading");
   d41ae:	f001 fa59 	bl	d5664 <_Z16_fetch_usbserialv>
   d41b2:	4918      	ldr	r1, [pc, #96]	; (d4214 <_Z7getTempPh+0x94>)
   d41b4:	f000 ff15 	bl	d4fe2 <_ZN5Print7printlnEPKc>
   d41b8:	ed9f 8b13 	vldr	d8, [pc, #76]	; d4208 <_Z7getTempPh+0x88>
  return _temp;
   d41bc:	e01c      	b.n	d41f8 <_Z7getTempPh+0x78>
  if (i < MAXRETRY) {
   d41be:	2d03      	cmp	r5, #3
   d41c0:	d0f5      	beq.n	d41ae <_Z7getTempPh+0x2e>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d41c2:	4813      	ldr	r0, [pc, #76]	; (d4210 <_Z7getTempPh+0x90>)
   d41c4:	f000 fc34 	bl	d4a30 <_ZN7DS18B2019convertToFahrenheitEf>
   d41c8:	ee10 0a10 	vmov	r0, s0
   d41cc:	f001 fe42 	bl	d5e54 <__aeabi_f2d>
   d41d0:	ec41 0b18 	vmov	d8, r0, r1
    showAddress(addr, false);
   d41d4:	2100      	movs	r1, #0
   d41d6:	4620      	mov	r0, r4
   d41d8:	f7ff ffae 	bl	d4138 <_Z11showAddressPhb>
    Serial.print(": ");
   d41dc:	f001 fa42 	bl	d5664 <_Z16_fetch_usbserialv>
   d41e0:	490d      	ldr	r1, [pc, #52]	; (d4218 <_Z7getTempPh+0x98>)
   d41e2:	f000 feeb 	bl	d4fbc <_ZN5Print5printEPKc>
    Serial.println(_temp);
   d41e6:	f001 fa3d 	bl	d5664 <_Z16_fetch_usbserialv>
   d41ea:	eeb0 0a48 	vmov.f32	s0, s16
   d41ee:	eef0 0a68 	vmov.f32	s1, s17
   d41f2:	2102      	movs	r1, #2
   d41f4:	f000 ffe6 	bl	d51c4 <_ZN5Print7printlnEdi>
}
   d41f8:	eeb0 0a48 	vmov.f32	s0, s16
   d41fc:	eef0 0a68 	vmov.f32	s1, s17
   d4200:	b002      	add	sp, #8
   d4202:	ecbd 8b02 	vpop	{d8}
   d4206:	bd70      	pop	{r4, r5, r6, pc}
   d4208:	00000000 	.word	0x00000000
   d420c:	7ff80000 	.word	0x7ff80000
   d4210:	2003e648 	.word	0x2003e648
   d4214:	000d6709 	.word	0x000d6709
   d4218:	000d6706 	.word	0x000d6706

000d421c <_Z13Show_DateTimeb>:

void Show_DateTime(bool lf) {
   d421c:	b538      	push	{r3, r4, r5, lr}
   d421e:	4604      	mov	r4, r0

    Serial.print(Time.month());
   d4220:	f001 fa20 	bl	d5664 <_Z16_fetch_usbserialv>
   d4224:	4605      	mov	r5, r0
   d4226:	f001 f88d 	bl	d5344 <_ZN9TimeClass5monthEv>
   d422a:	220a      	movs	r2, #10
   d422c:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   d422e:	4628      	mov	r0, r5
   d4230:	f7ff ff3f 	bl	d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    Serial.print("/");
   d4234:	f001 fa16 	bl	d5664 <_Z16_fetch_usbserialv>
   d4238:	4928      	ldr	r1, [pc, #160]	; (d42dc <_Z13Show_DateTimeb+0xc0>)
   d423a:	f000 febf 	bl	d4fbc <_ZN5Print5printEPKc>
    Serial.print(Time.day());
   d423e:	f001 fa11 	bl	d5664 <_Z16_fetch_usbserialv>
   d4242:	4605      	mov	r5, r0
   d4244:	f001 f872 	bl	d532c <_ZN9TimeClass3dayEv>
   d4248:	220a      	movs	r2, #10
   d424a:	4601      	mov	r1, r0
   d424c:	4628      	mov	r0, r5
   d424e:	f7ff ff30 	bl	d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    Serial.print("/");
   d4252:	f001 fa07 	bl	d5664 <_Z16_fetch_usbserialv>
   d4256:	4921      	ldr	r1, [pc, #132]	; (d42dc <_Z13Show_DateTimeb+0xc0>)
   d4258:	f000 feb0 	bl	d4fbc <_ZN5Print5printEPKc>
    Serial.print(Time.year());
   d425c:	f001 fa02 	bl	d5664 <_Z16_fetch_usbserialv>
   d4260:	4605      	mov	r5, r0
   d4262:	f001 f877 	bl	d5354 <_ZN9TimeClass4yearEv>
   d4266:	220a      	movs	r2, #10
   d4268:	4601      	mov	r1, r0
   d426a:	4628      	mov	r0, r5
   d426c:	f7ff ff21 	bl	d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    Serial.print("-");
   d4270:	f001 f9f8 	bl	d5664 <_Z16_fetch_usbserialv>
   d4274:	491a      	ldr	r1, [pc, #104]	; (d42e0 <_Z13Show_DateTimeb+0xc4>)
   d4276:	f000 fea1 	bl	d4fbc <_ZN5Print5printEPKc>
    Serial.print(Time.hour());
   d427a:	f001 f9f3 	bl	d5664 <_Z16_fetch_usbserialv>
   d427e:	4605      	mov	r5, r0
   d4280:	f001 f830 	bl	d52e4 <_ZN9TimeClass4hourEv>
   d4284:	220a      	movs	r2, #10
   d4286:	4601      	mov	r1, r0
   d4288:	4628      	mov	r0, r5
   d428a:	f7ff ff12 	bl	d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    Serial.print(":");
   d428e:	f001 f9e9 	bl	d5664 <_Z16_fetch_usbserialv>
   d4292:	4914      	ldr	r1, [pc, #80]	; (d42e4 <_Z13Show_DateTimeb+0xc8>)
   d4294:	f000 fe92 	bl	d4fbc <_ZN5Print5printEPKc>
    Serial.print(Time.minute());
   d4298:	f001 f9e4 	bl	d5664 <_Z16_fetch_usbserialv>
   d429c:	4605      	mov	r5, r0
   d429e:	f001 f82d 	bl	d52fc <_ZN9TimeClass6minuteEv>
   d42a2:	220a      	movs	r2, #10
   d42a4:	4601      	mov	r1, r0
   d42a6:	4628      	mov	r0, r5
   d42a8:	f7ff ff03 	bl	d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    Serial.print(":");
   d42ac:	f001 f9da 	bl	d5664 <_Z16_fetch_usbserialv>
   d42b0:	490c      	ldr	r1, [pc, #48]	; (d42e4 <_Z13Show_DateTimeb+0xc8>)
   d42b2:	f000 fe83 	bl	d4fbc <_ZN5Print5printEPKc>
    Serial.print(Time.second());
   d42b6:	f001 f9d5 	bl	d5664 <_Z16_fetch_usbserialv>
   d42ba:	4605      	mov	r5, r0
   d42bc:	f001 f82a 	bl	d5314 <_ZN9TimeClass6secondEv>
   d42c0:	220a      	movs	r2, #10
   d42c2:	4601      	mov	r1, r0
   d42c4:	4628      	mov	r0, r5
   d42c6:	f7ff fef4 	bl	d40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0>
    if(lf)
   d42ca:	b134      	cbz	r4, d42da <_Z13Show_DateTimeb+0xbe>
    {
        Serial.println("");
   d42cc:	f001 f9ca 	bl	d5664 <_Z16_fetch_usbserialv>
    }
    
}
   d42d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("");
   d42d4:	4904      	ldr	r1, [pc, #16]	; (d42e8 <_Z13Show_DateTimeb+0xcc>)
   d42d6:	f000 be84 	b.w	d4fe2 <_ZN5Print7printlnEPKc>
}
   d42da:	bd38      	pop	{r3, r4, r5, pc}
   d42dc:	000d6719 	.word	0x000d6719
   d42e0:	000d6704 	.word	0x000d6704
   d42e4:	000d671b 	.word	0x000d671b
   d42e8:	000d6708 	.word	0x000d6708

000d42ec <loop>:
void loop() {
   d42ec:	b510      	push	{r4, lr}
  if (millis() - msSample >= msSampleTime) {
   d42ee:	4c1d      	ldr	r4, [pc, #116]	; (d4364 <loop+0x78>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42f0:	f000 fc0e 	bl	d4b10 <HAL_Timer_Get_Milli_Seconds>
   d42f4:	6823      	ldr	r3, [r4, #0]
   d42f6:	1ac0      	subs	r0, r0, r3
   d42f8:	f64e 235f 	movw	r3, #59999	; 0xea5f
   d42fc:	4298      	cmp	r0, r3
   d42fe:	d92f      	bls.n	d4360 <loop+0x74>
   d4300:	f000 fc06 	bl	d4b10 <HAL_Timer_Get_Milli_Seconds>
    msSample = millis();
   d4304:	6020      	str	r0, [r4, #0]
    Show_DateTime(true);
   d4306:	2001      	movs	r0, #1
   d4308:	f7ff ff88 	bl	d421c <_Z13Show_DateTimeb>
      float temp = getTemp(sensorAddresses[i]);
   d430c:	4816      	ldr	r0, [pc, #88]	; (d4368 <loop+0x7c>)
   d430e:	f7ff ff37 	bl	d4180 <_Z7getTempPh>
   d4312:	ec51 0b10 	vmov	r0, r1, d0
   d4316:	f002 f8ed 	bl	d64f4 <__aeabi_d2f>
   d431a:	ee07 0a90 	vmov	s15, r0
      if (!isnan(temp)) celsius[i] = temp;
   d431e:	eef4 7a67 	vcmp.f32	s15, s15
   d4322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4326:	bf78      	it	vc
   d4328:	4b10      	ldrvc	r3, [pc, #64]	; (d436c <loop+0x80>)
      float temp = getTemp(sensorAddresses[i]);
   d432a:	4811      	ldr	r0, [pc, #68]	; (d4370 <loop+0x84>)
      if (!isnan(temp)) celsius[i] = temp;
   d432c:	bf78      	it	vc
   d432e:	edc3 7a00 	vstrvc	s15, [r3]
      float temp = getTemp(sensorAddresses[i]);
   d4332:	f7ff ff25 	bl	d4180 <_Z7getTempPh>
   d4336:	ec51 0b10 	vmov	r0, r1, d0
   d433a:	f002 f8db 	bl	d64f4 <__aeabi_d2f>
   d433e:	ee07 0a90 	vmov	s15, r0
      if (!isnan(temp)) celsius[i] = temp;
   d4342:	eef4 7a67 	vcmp.f32	s15, s15
   d4346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d434a:	bf7c      	itt	vc
   d434c:	4b07      	ldrvc	r3, [pc, #28]	; (d436c <loop+0x80>)
   d434e:	edc3 7a01 	vstrvc	s15, [r3, #4]
    Serial.println("");
   d4352:	f001 f987 	bl	d5664 <_Z16_fetch_usbserialv>
}
   d4356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("");
   d435a:	4906      	ldr	r1, [pc, #24]	; (d4374 <loop+0x88>)
   d435c:	f000 be41 	b.w	d4fe2 <_ZN5Print7printlnEPKc>
}
   d4360:	bd10      	pop	{r4, pc}
   d4362:	bf00      	nop
   d4364:	2003e644 	.word	0x2003e644
   d4368:	2003f400 	.word	0x2003f400
   d436c:	2003e5c8 	.word	0x2003e5c8
   d4370:	2003f408 	.word	0x2003f408
   d4374:	000d6708 	.word	0x000d6708

000d4378 <_GLOBAL__sub_I_ds18b20>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4378:	4b03      	ldr	r3, [pc, #12]	; (d4388 <_GLOBAL__sub_I_ds18b20+0x10>)
DS18B20 ds18b20(dsData);
   d437a:	4804      	ldr	r0, [pc, #16]	; (d438c <_GLOBAL__sub_I_ds18b20+0x14>)
   d437c:	2201      	movs	r2, #1
   d437e:	701a      	strb	r2, [r3, #0]
   d4380:	2104      	movs	r1, #4
   d4382:	2200      	movs	r2, #0
   d4384:	f000 ba61 	b.w	d484a <_ZN7DS18B20C1Etb>
   d4388:	2003e640 	.word	0x2003e640
   d438c:	2003e648 	.word	0x2003e648

000d4390 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4390:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4392:	6803      	ldr	r3, [r0, #0]
   d4394:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4396:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4398:	d904      	bls.n	d43a4 <nrf_gpio_pin_port_decode+0x14>
   d439a:	4a07      	ldr	r2, [pc, #28]	; (d43b8 <nrf_gpio_pin_port_decode+0x28>)
   d439c:	2100      	movs	r1, #0
   d439e:	200a      	movs	r0, #10
   d43a0:	f000 fca6 	bl	d4cf0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d43a4:	6823      	ldr	r3, [r4, #0]
   d43a6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43a8:	bf83      	ittte	hi
   d43aa:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d43ae:	4803      	ldrhi	r0, [pc, #12]	; (d43bc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43b0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d43b2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d43b6:	bd10      	pop	{r4, pc}
   d43b8:	000d4b01 	.word	0x000d4b01
   d43bc:	50000300 	.word	0x50000300

000d43c0 <_ZN7OneWire19digitalWriteFastLowEv>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d43c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43c2:	4c1b      	ldr	r4, [pc, #108]	; (d4430 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
      pinResetFast(_pin);
   d43c4:	8805      	ldrh	r5, [r0, #0]
   d43c6:	7823      	ldrb	r3, [r4, #0]
   d43c8:	4e1a      	ldr	r6, [pc, #104]	; (d4434 <_ZN7OneWire19digitalWriteFastLowEv+0x74>)
   d43ca:	f3bf 8f5b 	dmb	ish
   d43ce:	f013 0f01 	tst.w	r3, #1
   d43d2:	d109      	bne.n	d43e8 <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d43d4:	4620      	mov	r0, r4
   d43d6:	f7ff fe64 	bl	d40a2 <__cxa_guard_acquire>
   d43da:	b128      	cbz	r0, d43e8 <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d43dc:	f000 fb58 	bl	d4a90 <HAL_Pin_Map>
   d43e0:	6030      	str	r0, [r6, #0]
   d43e2:	4620      	mov	r0, r4
   d43e4:	f7ff fe62 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43e8:	6833      	ldr	r3, [r6, #0]
   d43ea:	012d      	lsls	r5, r5, #4
   d43ec:	5d5b      	ldrb	r3, [r3, r5]
   d43ee:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43f0:	7823      	ldrb	r3, [r4, #0]
   d43f2:	f3bf 8f5b 	dmb	ish
   d43f6:	07db      	lsls	r3, r3, #31
   d43f8:	d409      	bmi.n	d440e <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d43fa:	480d      	ldr	r0, [pc, #52]	; (d4430 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d43fc:	f7ff fe51 	bl	d40a2 <__cxa_guard_acquire>
   d4400:	b128      	cbz	r0, d440e <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d4402:	f000 fb45 	bl	d4a90 <HAL_Pin_Map>
   d4406:	6030      	str	r0, [r6, #0]
   d4408:	4809      	ldr	r0, [pc, #36]	; (d4430 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d440a:	f7ff fe4f 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d440e:	6833      	ldr	r3, [r6, #0]
   d4410:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4412:	a801      	add	r0, sp, #4
   d4414:	785b      	ldrb	r3, [r3, #1]
   d4416:	f003 031f 	and.w	r3, r3, #31
   d441a:	433b      	orrs	r3, r7
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	f7ff ffb7 	bl	d4390 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4422:	9a01      	ldr	r2, [sp, #4]
   d4424:	2301      	movs	r3, #1
   d4426:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4428:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }
   d442c:	b003      	add	sp, #12
   d442e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4430:	2003e668 	.word	0x2003e668
   d4434:	2003e66c 	.word	0x2003e66c

000d4438 <_ZN7OneWire20digitalWriteFastHighEv>:

    inline void digitalWriteFastHigh() {
   d4438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d443a:	4c1b      	ldr	r4, [pc, #108]	; (d44a8 <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
      pinSetFast(_pin);
   d443c:	8805      	ldrh	r5, [r0, #0]
   d443e:	7823      	ldrb	r3, [r4, #0]
   d4440:	4e1a      	ldr	r6, [pc, #104]	; (d44ac <_ZN7OneWire20digitalWriteFastHighEv+0x74>)
   d4442:	f3bf 8f5b 	dmb	ish
   d4446:	f013 0f01 	tst.w	r3, #1
   d444a:	d109      	bne.n	d4460 <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d444c:	4620      	mov	r0, r4
   d444e:	f7ff fe28 	bl	d40a2 <__cxa_guard_acquire>
   d4452:	b128      	cbz	r0, d4460 <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d4454:	f000 fb1c 	bl	d4a90 <HAL_Pin_Map>
   d4458:	6030      	str	r0, [r6, #0]
   d445a:	4620      	mov	r0, r4
   d445c:	f7ff fe26 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4460:	6833      	ldr	r3, [r6, #0]
   d4462:	012d      	lsls	r5, r5, #4
   d4464:	5d5b      	ldrb	r3, [r3, r5]
   d4466:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4468:	7823      	ldrb	r3, [r4, #0]
   d446a:	f3bf 8f5b 	dmb	ish
   d446e:	07db      	lsls	r3, r3, #31
   d4470:	d409      	bmi.n	d4486 <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d4472:	480d      	ldr	r0, [pc, #52]	; (d44a8 <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d4474:	f7ff fe15 	bl	d40a2 <__cxa_guard_acquire>
   d4478:	b128      	cbz	r0, d4486 <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d447a:	f000 fb09 	bl	d4a90 <HAL_Pin_Map>
   d447e:	6030      	str	r0, [r6, #0]
   d4480:	4809      	ldr	r0, [pc, #36]	; (d44a8 <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d4482:	f7ff fe13 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4486:	6833      	ldr	r3, [r6, #0]
   d4488:	442b      	add	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d448a:	a801      	add	r0, sp, #4
   d448c:	785b      	ldrb	r3, [r3, #1]
   d448e:	f003 031f 	and.w	r3, r3, #31
   d4492:	433b      	orrs	r3, r7
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	f7ff ff7b 	bl	d4390 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d449a:	9a01      	ldr	r2, [sp, #4]
   d449c:	2301      	movs	r3, #1
   d449e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d44a0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    }
   d44a4:	b003      	add	sp, #12
   d44a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44a8:	2003e668 	.word	0x2003e668
   d44ac:	2003e66c 	.word	0x2003e66c

000d44b0 <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
   d44b0:	b510      	push	{r4, lr}
   d44b2:	4604      	mov	r4, r0
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
    {
        noInterrupts();
   d44b4:	f001 f8fc 	bl	d56b0 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d44b8:	4620      	mov	r0, r4
   d44ba:	f7ff ffbd 	bl	d4438 <_ZN7OneWire20digitalWriteFastHighEv>

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d44be:	8820      	ldrh	r0, [r4, #0]
   d44c0:	2101      	movs	r1, #1
   d44c2:	f000 faed 	bl	d4aa0 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d44c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        interrupts();
   d44ca:	f001 b8f3 	b.w	d56b4 <_Z10interruptsv>
	...

000d44d0 <_ZN7OneWire15digitalReadFastEv>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d44d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44d4:	4d20      	ldr	r5, [pc, #128]	; (d4558 <_ZN7OneWire15digitalReadFastEv+0x88>)
      return pinReadFast(_pin);
   d44d6:	8806      	ldrh	r6, [r0, #0]
   d44d8:	782b      	ldrb	r3, [r5, #0]
   d44da:	4f20      	ldr	r7, [pc, #128]	; (d455c <_ZN7OneWire15digitalReadFastEv+0x8c>)
   d44dc:	f3bf 8f5b 	dmb	ish
   d44e0:	f013 0f01 	tst.w	r3, #1
   d44e4:	d109      	bne.n	d44fa <_ZN7OneWire15digitalReadFastEv+0x2a>
   d44e6:	4628      	mov	r0, r5
   d44e8:	f7ff fddb 	bl	d40a2 <__cxa_guard_acquire>
   d44ec:	b128      	cbz	r0, d44fa <_ZN7OneWire15digitalReadFastEv+0x2a>
   d44ee:	f000 facf 	bl	d4a90 <HAL_Pin_Map>
   d44f2:	6038      	str	r0, [r7, #0]
   d44f4:	4628      	mov	r0, r5
   d44f6:	f7ff fdd9 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44fa:	683b      	ldr	r3, [r7, #0]
   d44fc:	0136      	lsls	r6, r6, #4
   d44fe:	5d9c      	ldrb	r4, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4500:	782b      	ldrb	r3, [r5, #0]
   d4502:	f3bf 8f5b 	dmb	ish
   d4506:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4508:	ea4f 1844 	mov.w	r8, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d450c:	d409      	bmi.n	d4522 <_ZN7OneWire15digitalReadFastEv+0x52>
   d450e:	4812      	ldr	r0, [pc, #72]	; (d4558 <_ZN7OneWire15digitalReadFastEv+0x88>)
   d4510:	f7ff fdc7 	bl	d40a2 <__cxa_guard_acquire>
   d4514:	b128      	cbz	r0, d4522 <_ZN7OneWire15digitalReadFastEv+0x52>
   d4516:	f000 fabb 	bl	d4a90 <HAL_Pin_Map>
   d451a:	6038      	str	r0, [r7, #0]
   d451c:	480e      	ldr	r0, [pc, #56]	; (d4558 <_ZN7OneWire15digitalReadFastEv+0x88>)
   d451e:	f7ff fdc5 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4522:	683b      	ldr	r3, [r7, #0]
   d4524:	4433      	add	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4526:	a801      	add	r0, sp, #4
   d4528:	785c      	ldrb	r4, [r3, #1]
   d452a:	f004 041f 	and.w	r4, r4, #31
   d452e:	ea44 0408 	orr.w	r4, r4, r8
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4532:	9401      	str	r4, [sp, #4]
   d4534:	f7ff ff2c 	bl	d4390 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d4538:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   d453c:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d453e:	a801      	add	r0, sp, #4
   d4540:	f7ff ff26 	bl	d4390 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4544:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4546:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d454a:	40d8      	lsrs	r0, r3
    }
   d454c:	f000 0001 	and.w	r0, r0, #1
   d4550:	b002      	add	sp, #8
   d4552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4556:	bf00      	nop
   d4558:	2003e668 	.word	0x2003e668
   d455c:	2003e66c 	.word	0x2003e66c

000d4560 <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
   d4560:	b538      	push	{r3, r4, r5, lr}
   d4562:	4604      	mov	r4, r0
   d4564:	460d      	mov	r5, r1
    pinMode(pin, INPUT);
   d4566:	4628      	mov	r0, r5
   d4568:	2100      	movs	r1, #0
   d456a:	f001 faa3 	bl	d5ab4 <pinMode>
    _pin = pin;
   d456e:	8025      	strh	r5, [r4, #0]
}
   d4570:	4620      	mov	r0, r4
   d4572:	bd38      	pop	{r3, r4, r5, pc}

000d4574 <_ZN7OneWire5resetEv>:
{
   d4574:	b570      	push	{r4, r5, r6, lr}
   d4576:	4605      	mov	r5, r0
    noInterrupts();
   d4578:	f001 f89a 	bl	d56b0 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d457c:	8828      	ldrh	r0, [r5, #0]
   d457e:	2100      	movs	r1, #0
   d4580:	f000 fa8e 	bl	d4aa0 <HAL_Pin_Mode>
    interrupts();
   d4584:	f001 f896 	bl	d56b4 <_Z10interruptsv>
   d4588:	247d      	movs	r4, #125	; 0x7d
        if (--retries == 0)
   d458a:	3c01      	subs	r4, #1
   d458c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4590:	d02d      	beq.n	d45ee <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4592:	2002      	movs	r0, #2
   d4594:	f000 fab4 	bl	d4b00 <HAL_Delay_Microseconds>
    } while (!digitalReadFast());
   d4598:	4628      	mov	r0, r5
   d459a:	f7ff ff99 	bl	d44d0 <_ZN7OneWire15digitalReadFastEv>
   d459e:	2800      	cmp	r0, #0
   d45a0:	d0f3      	beq.n	d458a <_ZN7OneWire5resetEv+0x16>
    noInterrupts();
   d45a2:	f001 f885 	bl	d56b0 <_Z12noInterruptsv>
    digitalWriteFastLow();
   d45a6:	4628      	mov	r0, r5
   d45a8:	f7ff ff0a 	bl	d43c0 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d45ac:	2101      	movs	r1, #1
   d45ae:	8828      	ldrh	r0, [r5, #0]
   d45b0:	f000 fa76 	bl	d4aa0 <HAL_Pin_Mode>
    interrupts();
   d45b4:	f001 f87e 	bl	d56b4 <_Z10interruptsv>
   d45b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d45bc:	f000 faa0 	bl	d4b00 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d45c0:	f000 faae 	bl	d4b20 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d45c4:	2100      	movs	r1, #0
   d45c6:	4606      	mov	r6, r0
   d45c8:	8828      	ldrh	r0, [r5, #0]
   d45ca:	f000 fa69 	bl	d4aa0 <HAL_Pin_Mode>
   d45ce:	2046      	movs	r0, #70	; 0x46
   d45d0:	f000 fa96 	bl	d4b00 <HAL_Delay_Microseconds>
        r = !digitalReadFast();
   d45d4:	4628      	mov	r0, r5
   d45d6:	f7ff ff7b 	bl	d44d0 <_ZN7OneWire15digitalReadFastEv>
   d45da:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d45de:	4630      	mov	r0, r6
   d45e0:	f000 faa6 	bl	d4b30 <HAL_enable_irq>
   d45e4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d45e8:	0964      	lsrs	r4, r4, #5
   d45ea:	f000 fa89 	bl	d4b00 <HAL_Delay_Microseconds>
}
   d45ee:	4620      	mov	r0, r4
   d45f0:	bd70      	pop	{r4, r5, r6, pc}

000d45f2 <_ZN7OneWire9write_bitEh>:
{
   d45f2:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d45f4:	f011 0501 	ands.w	r5, r1, #1
{
   d45f8:	4604      	mov	r4, r0
    if (v & 1)
   d45fa:	d018      	beq.n	d462e <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d45fc:	f000 fa90 	bl	d4b20 <HAL_disable_irq>
   d4600:	4605      	mov	r5, r0
            digitalWriteFastLow();
   d4602:	4620      	mov	r0, r4
   d4604:	f7ff fedc 	bl	d43c0 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d4608:	2101      	movs	r1, #1
   d460a:	8820      	ldrh	r0, [r4, #0]
   d460c:	f000 fa48 	bl	d4aa0 <HAL_Pin_Mode>
   d4610:	2001      	movs	r0, #1
   d4612:	f000 fa75 	bl	d4b00 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d4616:	8820      	ldrh	r0, [r4, #0]
   d4618:	2100      	movs	r1, #0
   d461a:	f000 fa41 	bl	d4aa0 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d461e:	4628      	mov	r0, r5
   d4620:	f000 fa86 	bl	d4b30 <HAL_enable_irq>
   d4624:	203b      	movs	r0, #59	; 0x3b
}
   d4626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d462a:	f000 ba69 	b.w	d4b00 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d462e:	f000 fa77 	bl	d4b20 <HAL_disable_irq>
   d4632:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d4634:	4620      	mov	r0, r4
   d4636:	f7ff fec3 	bl	d43c0 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d463a:	2101      	movs	r1, #1
   d463c:	8820      	ldrh	r0, [r4, #0]
   d463e:	f000 fa2f 	bl	d4aa0 <HAL_Pin_Mode>
   d4642:	2041      	movs	r0, #65	; 0x41
   d4644:	f000 fa5c 	bl	d4b00 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d4648:	8820      	ldrh	r0, [r4, #0]
   d464a:	4629      	mov	r1, r5
   d464c:	f000 fa28 	bl	d4aa0 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d4650:	4630      	mov	r0, r6
   d4652:	f000 fa6d 	bl	d4b30 <HAL_enable_irq>
   d4656:	2005      	movs	r0, #5
   d4658:	e7e5      	b.n	d4626 <_ZN7OneWire9write_bitEh+0x34>

000d465a <_ZN7OneWire8read_bitEv>:
{
   d465a:	b538      	push	{r3, r4, r5, lr}
   d465c:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d465e:	f000 fa5f 	bl	d4b20 <HAL_disable_irq>
   d4662:	4605      	mov	r5, r0
        digitalWriteFastLow();
   d4664:	4620      	mov	r0, r4
   d4666:	f7ff feab 	bl	d43c0 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d466a:	8820      	ldrh	r0, [r4, #0]
   d466c:	2101      	movs	r1, #1
   d466e:	f000 fa17 	bl	d4aa0 <HAL_Pin_Mode>
   d4672:	2001      	movs	r0, #1
   d4674:	f000 fa44 	bl	d4b00 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d4678:	2100      	movs	r1, #0
   d467a:	8820      	ldrh	r0, [r4, #0]
   d467c:	f000 fa10 	bl	d4aa0 <HAL_Pin_Mode>
   d4680:	200d      	movs	r0, #13
   d4682:	f000 fa3d 	bl	d4b00 <HAL_Delay_Microseconds>
        r = digitalReadFast();
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff ff22 	bl	d44d0 <_ZN7OneWire15digitalReadFastEv>
   d468c:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d468e:	4628      	mov	r0, r5
   d4690:	f000 fa4e 	bl	d4b30 <HAL_enable_irq>
   d4694:	202e      	movs	r0, #46	; 0x2e
   d4696:	f000 fa33 	bl	d4b00 <HAL_Delay_Microseconds>
}
   d469a:	4620      	mov	r0, r4
   d469c:	bd38      	pop	{r3, r4, r5, pc}

000d469e <_ZN7OneWire5writeEhh>:
{
   d469e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d46a0:	460f      	mov	r7, r1
   d46a2:	4615      	mov	r5, r2
   d46a4:	2608      	movs	r6, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d46a6:	2401      	movs	r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d46a8:	4227      	tst	r7, r4
   d46aa:	bf14      	ite	ne
   d46ac:	2101      	movne	r1, #1
   d46ae:	2100      	moveq	r1, #0
   d46b0:	9001      	str	r0, [sp, #4]
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d46b2:	0064      	lsls	r4, r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d46b4:	f7ff ff9d 	bl	d45f2 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d46b8:	3e01      	subs	r6, #1
   d46ba:	9801      	ldr	r0, [sp, #4]
   d46bc:	b2e4      	uxtb	r4, r4
   d46be:	d1f3      	bne.n	d46a8 <_ZN7OneWire5writeEhh+0xa>
    if (power)
   d46c0:	b125      	cbz	r5, d46cc <_ZN7OneWire5writeEhh+0x2e>
}
   d46c2:	b003      	add	sp, #12
   d46c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d46c8:	f7ff bef2 	b.w	d44b0 <_ZN7OneWire11write_bytesEPKhtb.part.0>
   d46cc:	b003      	add	sp, #12
   d46ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46d0 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d46d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46d2:	4607      	mov	r7, r0
   d46d4:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d46d6:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d46d8:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d46da:	4638      	mov	r0, r7
   d46dc:	f7ff ffbd 	bl	d465a <_ZN7OneWire8read_bitEv>
   d46e0:	b100      	cbz	r0, d46e4 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d46e2:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d46e4:	0064      	lsls	r4, r4, #1
   d46e6:	3e01      	subs	r6, #1
   d46e8:	b2e4      	uxtb	r4, r4
   d46ea:	d1f6      	bne.n	d46da <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d46ec:	4628      	mov	r0, r5
   d46ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46f0 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d46f0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d46f2:	2200      	movs	r2, #0
{
   d46f4:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d46f6:	2155      	movs	r1, #85	; 0x55
{
   d46f8:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d46fa:	f7ff ffd0 	bl	d469e <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d46fe:	1e65      	subs	r5, r4, #1
   d4700:	3407      	adds	r4, #7
        write(rom[i]);
   d4702:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4706:	2200      	movs	r2, #0
   d4708:	4630      	mov	r0, r6
   d470a:	f7ff ffc8 	bl	d469e <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d470e:	42a5      	cmp	r5, r4
   d4710:	d1f7      	bne.n	d4702 <_ZN7OneWire6selectEPKh+0x12>
}
   d4712:	bd70      	pop	{r4, r5, r6, pc}

000d4714 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d4714:	2200      	movs	r2, #0
   d4716:	21cc      	movs	r1, #204	; 0xcc
   d4718:	f7ff bfc1 	b.w	d469e <_ZN7OneWire5writeEhh>

000d471c <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d471c:	2300      	movs	r3, #0
   d471e:	8043      	strh	r3, [r0, #2]
   d4720:	8083      	strh	r3, [r0, #4]
   d4722:	80c3      	strh	r3, [r0, #6]
   d4724:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d4726:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4728:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d472a:	4770      	bx	lr

000d472c <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4730:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d4734:	4604      	mov	r4, r0
   d4736:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d4738:	f1b9 0f00 	cmp.w	r9, #0
   d473c:	d00d      	beq.n	d475a <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d473e:	2000      	movs	r0, #0
   d4740:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4742:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d4744:	1ca3      	adds	r3, r4, #2
   d4746:	f108 38ff 	add.w	r8, r8, #4294967295
   d474a:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d474c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d4750:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d4754:	42a3      	cmp	r3, r4
   d4756:	d1f9      	bne.n	d474c <_ZN7OneWire6searchEPh+0x20>
   d4758:	e004      	b.n	d4764 <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d475a:	f7ff ff0b 	bl	d4574 <_ZN7OneWire5resetEv>
   d475e:	b918      	cbnz	r0, d4768 <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d4760:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4762:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d4764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d4768:	464a      	mov	r2, r9
   d476a:	21f0      	movs	r1, #240	; 0xf0
   d476c:	4620      	mov	r0, r4
   d476e:	f7ff ff96 	bl	d469e <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d4772:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d4774:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d4776:	4635      	mov	r5, r6
            id_bit = read_bit();
   d4778:	4620      	mov	r0, r4
   d477a:	f7ff ff6e 	bl	d465a <_ZN7OneWire8read_bitEv>
   d477e:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d4780:	4620      	mov	r0, r4
   d4782:	f7ff ff6a 	bl	d465a <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d4786:	2f01      	cmp	r7, #1
   d4788:	d10f      	bne.n	d47aa <_ZN7OneWire6searchEPh+0x7e>
   d478a:	2801      	cmp	r0, #1
   d478c:	d127      	bne.n	d47de <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d478e:	2d40      	cmp	r5, #64	; 0x40
   d4790:	d9d5      	bls.n	d473e <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d4792:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d4796:	f1b9 0f00 	cmp.w	r9, #0
   d479a:	d101      	bne.n	d47a0 <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d479c:	2301      	movs	r3, #1
   d479e:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d47a0:	78a3      	ldrb	r3, [r4, #2]
   d47a2:	2b00      	cmp	r3, #0
   d47a4:	d0cb      	beq.n	d473e <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d47a6:	2001      	movs	r0, #1
   d47a8:	e7cc      	b.n	d4744 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d47aa:	4287      	cmp	r7, r0
   d47ac:	eb04 030a 	add.w	r3, r4, sl
   d47b0:	d10c      	bne.n	d47cc <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d47b2:	7aa2      	ldrb	r2, [r4, #10]
   d47b4:	42aa      	cmp	r2, r5
   d47b6:	d90e      	bls.n	d47d6 <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d47b8:	789a      	ldrb	r2, [r3, #2]
   d47ba:	4216      	tst	r6, r2
   d47bc:	bf14      	ite	ne
   d47be:	2701      	movne	r7, #1
   d47c0:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d47c2:	b967      	cbnz	r7, d47de <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d47c4:	2d08      	cmp	r5, #8
   d47c6:	d800      	bhi.n	d47ca <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d47c8:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d47ca:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d47cc:	789a      	ldrb	r2, [r3, #2]
   d47ce:	ea22 0206 	bic.w	r2, r2, r6
   d47d2:	709a      	strb	r2, [r3, #2]
   d47d4:	e009      	b.n	d47ea <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d47d6:	bf0c      	ite	eq
   d47d8:	2701      	moveq	r7, #1
   d47da:	2700      	movne	r7, #0
   d47dc:	e7f1      	b.n	d47c2 <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d47de:	eb04 020a 	add.w	r2, r4, sl
   d47e2:	2701      	movs	r7, #1
   d47e4:	7893      	ldrb	r3, [r2, #2]
   d47e6:	4333      	orrs	r3, r6
   d47e8:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d47ea:	4639      	mov	r1, r7
   d47ec:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d47ee:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d47f0:	f7ff feff 	bl	d45f2 <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d47f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d47f8:	bf04      	itt	eq
   d47fa:	f10a 0a01 	addeq.w	sl, sl, #1
   d47fe:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d4802:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d4806:	bf08      	it	eq
   d4808:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d480a:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d480e:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d4810:	d9b2      	bls.n	d4778 <_ZN7OneWire6searchEPh+0x4c>
   d4812:	e7bc      	b.n	d478e <_ZN7OneWire6searchEPh+0x62>

000d4814 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d4814:	b530      	push	{r4, r5, lr}
   d4816:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d4818:	4401      	add	r1, r0
   d481a:	2000      	movs	r0, #0

    while (len--)
   d481c:	428a      	cmp	r2, r1
   d481e:	d013      	beq.n	d4848 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d4820:	f812 5b01 	ldrb.w	r5, [r2], #1
   d4824:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4826:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d482a:	f013 0f01 	tst.w	r3, #1
   d482e:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d4832:	bf1c      	itt	ne
   d4834:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4838:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d483a:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d483c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d4840:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d4844:	d1ef      	bne.n	d4826 <_ZN7OneWire4crc8EPhh+0x12>
   d4846:	e7e9      	b.n	d481c <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d4848:	bd30      	pop	{r4, r5, pc}

000d484a <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d484a:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  memset(_data, 0, sizeof(_data));
   d484c:	2300      	movs	r3, #0
   d484e:	6043      	str	r3, [r0, #4]
   d4850:	6083      	str	r3, [r0, #8]
   d4852:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
   d4854:	6103      	str	r3, [r0, #16]
   d4856:	6143      	str	r3, [r0, #20]
  _dataCRC     = 0; 
   d4858:	8303      	strh	r3, [r0, #24]
  _readCRC     = 0;
  _singleDrop  = singleDrop;
  _sampleDelay = 750;
   d485a:	f240 23ee 	movw	r3, #750	; 0x2ee
  _singleDrop  = singleDrop;
   d485e:	7682      	strb	r2, [r0, #26]
  _sampleDelay = 750;
   d4860:	61c3      	str	r3, [r0, #28]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d4862:	4604      	mov	r4, r0
  ds           = new OneWire(pin);
   d4864:	200e      	movs	r0, #14
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d4866:	9101      	str	r1, [sp, #4]
  ds           = new OneWire(pin);
   d4868:	f7ff fc15 	bl	d4096 <_Znwj>
   d486c:	4605      	mov	r5, r0
   d486e:	b110      	cbz	r0, d4876 <_ZN7DS18B20C1Etb+0x2c>
   d4870:	9901      	ldr	r1, [sp, #4]
   d4872:	f7ff fe75 	bl	d4560 <_ZN7OneWireC1Et>
}
   d4876:	4620      	mov	r0, r4
  ds           = new OneWire(pin);
   d4878:	6025      	str	r5, [r4, #0]
}
   d487a:	b003      	add	sp, #12
   d487c:	bd30      	pop	{r4, r5, pc}

000d487e <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d487e:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d4880:	f100 0510 	add.w	r5, r0, #16
{
   d4884:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d4886:	6800      	ldr	r0, [r0, #0]
   d4888:	4629      	mov	r1, r5
   d488a:	f7ff ff4f 	bl	d472c <_ZN7OneWire6searchEPh>
   d488e:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d4890:	bf1d      	ittte	ne
   d4892:	682b      	ldrne	r3, [r5, #0]
   d4894:	6023      	strne	r3, [r4, #0]
   d4896:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d4898:	6023      	streq	r3, [r4, #0]
  boolean isSuccess = ds->search(_addr);
   d489a:	bf14      	ite	ne
   d489c:	2001      	movne	r0, #1
   d489e:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
   d48a0:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
   d48a2:	bd38      	pop	{r3, r4, r5, pc}

000d48a4 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d48a4:	6800      	ldr	r0, [r0, #0]
   d48a6:	f7ff bf39 	b.w	d471c <_ZN7OneWire12reset_searchEv>
	...

000d48ac <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d48ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d48b0:	7e83      	ldrb	r3, [r0, #26]
{
   d48b2:	4604      	mov	r4, r0
   d48b4:	460d      	mov	r5, r1
   d48b6:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d48b8:	b92b      	cbnz	r3, d48c6 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
   d48ba:	780b      	ldrb	r3, [r1, #0]
   d48bc:	b91b      	cbnz	r3, d48c6 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d48be:	ed9f 0a57 	vldr	s0, [pc, #348]	; d4a1c <_ZN7DS18B2014getTemperatureEPhb+0x170>
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
   d48c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
   d48c6:	6820      	ldr	r0, [r4, #0]
   d48c8:	f7ff fe54 	bl	d4574 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d48cc:	7ea3      	ldrb	r3, [r4, #26]
   d48ce:	2b00      	cmp	r3, #0
   d48d0:	d05c      	beq.n	d498c <_ZN7DS18B2014getTemperatureEPhb+0xe0>
   d48d2:	2e00      	cmp	r6, #0
   d48d4:	d15a      	bne.n	d498c <_ZN7DS18B2014getTemperatureEPhb+0xe0>
    ds->skip();
   d48d6:	6820      	ldr	r0, [r4, #0]
   d48d8:	f7ff ff1c 	bl	d4714 <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
   d48dc:	2200      	movs	r2, #0
   d48de:	2144      	movs	r1, #68	; 0x44
   d48e0:	6820      	ldr	r0, [r4, #0]
   d48e2:	f7ff fedc 	bl	d469e <_ZN7OneWire5writeEhh>
  delay(_sampleDelay);    // maybe 750ms is enough, maybe not
   d48e6:	69e0      	ldr	r0, [r4, #28]
   d48e8:	f000 fd4a 	bl	d5380 <delay>
  ds->reset();
   d48ec:	6820      	ldr	r0, [r4, #0]
   d48ee:	f7ff fe41 	bl	d4574 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d48f2:	7ea3      	ldrb	r3, [r4, #26]
   d48f4:	2b00      	cmp	r3, #0
   d48f6:	d04e      	beq.n	d4996 <_ZN7DS18B2014getTemperatureEPhb+0xea>
   d48f8:	2e00      	cmp	r6, #0
   d48fa:	d14c      	bne.n	d4996 <_ZN7DS18B2014getTemperatureEPhb+0xea>
    ds->skip();
   d48fc:	6820      	ldr	r0, [r4, #0]
   d48fe:	f7ff ff09 	bl	d4714 <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
   d4902:	6820      	ldr	r0, [r4, #0]
   d4904:	2200      	movs	r2, #0
   d4906:	21be      	movs	r1, #190	; 0xbe
   d4908:	f7ff fec9 	bl	d469e <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d490c:	782b      	ldrb	r3, [r5, #0]
   d490e:	2b26      	cmp	r3, #38	; 0x26
   d4910:	d104      	bne.n	d491c <_ZN7DS18B2014getTemperatureEPhb+0x70>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d4912:	2200      	movs	r2, #0
   d4914:	6820      	ldr	r0, [r4, #0]
   d4916:	4611      	mov	r1, r2
   d4918:	f7ff fec1 	bl	d469e <_ZN7OneWire5writeEhh>
   d491c:	1d26      	adds	r6, r4, #4
   d491e:	f104 080d 	add.w	r8, r4, #13
   d4922:	4637      	mov	r7, r6
    _data[i] = ds->read();
   d4924:	6820      	ldr	r0, [r4, #0]
   d4926:	f7ff fed3 	bl	d46d0 <_ZN7OneWire4readEv>
   d492a:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
   d492e:	4546      	cmp	r6, r8
   d4930:	d1f8      	bne.n	d4924 <_ZN7DS18B2014getTemperatureEPhb+0x78>
  _dataCRC = (OneWire::crc8(_data, 8));
   d4932:	2108      	movs	r1, #8
   d4934:	4638      	mov	r0, r7
   d4936:	f7ff ff6d 	bl	d4814 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d493a:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
   d493c:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
   d493e:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
   d4940:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d4942:	d1bc      	bne.n	d48be <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
   d4944:	782b      	ldrb	r3, [r5, #0]
   d4946:	2b26      	cmp	r3, #38	; 0x26
   d4948:	d047      	beq.n	d49da <_ZN7DS18B2014getTemperatureEPhb+0x12e>
   d494a:	d829      	bhi.n	d49a0 <_ZN7DS18B2014getTemperatureEPhb+0xf4>
   d494c:	2b10      	cmp	r3, #16
   d494e:	d029      	beq.n	d49a4 <_ZN7DS18B2014getTemperatureEPhb+0xf8>
   d4950:	2b22      	cmp	r3, #34	; 0x22
   d4952:	d1b4      	bne.n	d48be <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
   d4954:	7a22      	ldrb	r2, [r4, #8]
   d4956:	7923      	ldrb	r3, [r4, #4]
   d4958:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d495c:	2a20      	cmp	r2, #32
   d495e:	d036      	beq.n	d49ce <_ZN7DS18B2014getTemperatureEPhb+0x122>
   d4960:	2a40      	cmp	r2, #64	; 0x40
   d4962:	d037      	beq.n	d49d4 <_ZN7DS18B2014getTemperatureEPhb+0x128>
   d4964:	b912      	cbnz	r2, d496c <_ZN7DS18B2014getTemperatureEPhb+0xc0>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d4966:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d496a:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d496c:	7963      	ldrb	r3, [r4, #5]
   d496e:	7920      	ldrb	r0, [r4, #4]
   d4970:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d4974:	b200      	sxth	r0, r0
   d4976:	f001 fa5b 	bl	d5e30 <__aeabi_i2d>
   d497a:	4b29      	ldr	r3, [pc, #164]	; (d4a20 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d497c:	2200      	movs	r2, #0
   d497e:	f001 fac1 	bl	d5f04 <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d4982:	f001 fdb7 	bl	d64f4 <__aeabi_d2f>
   d4986:	ee00 0a10 	vmov	s0, r0
      break;
   d498a:	e79a      	b.n	d48c2 <_ZN7DS18B2014getTemperatureEPhb+0x16>
    ds->select(addr);
   d498c:	6820      	ldr	r0, [r4, #0]
   d498e:	4629      	mov	r1, r5
   d4990:	f7ff feae 	bl	d46f0 <_ZN7OneWire6selectEPKh>
   d4994:	e7a2      	b.n	d48dc <_ZN7DS18B2014getTemperatureEPhb+0x30>
    ds->select(addr);
   d4996:	6820      	ldr	r0, [r4, #0]
   d4998:	4629      	mov	r1, r5
   d499a:	f7ff fea9 	bl	d46f0 <_ZN7OneWire6selectEPKh>
   d499e:	e7b0      	b.n	d4902 <_ZN7DS18B2014getTemperatureEPhb+0x56>
  switch(addr[0]) 
   d49a0:	2b28      	cmp	r3, #40	; 0x28
   d49a2:	e7d6      	b.n	d4952 <_ZN7DS18B2014getTemperatureEPhb+0xa6>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d49a4:	7ae3      	ldrb	r3, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d49a6:	88a2      	ldrh	r2, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d49a8:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d49aa:	bf08      	it	eq
   d49ac:	7aa3      	ldrbeq	r3, [r4, #10]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d49ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d49b2:	bf03      	ittte	eq
   d49b4:	f1c3 030c 	rsbeq	r3, r3, #12
   d49b8:	f022 020f 	biceq.w	r2, r2, #15
   d49bc:	189b      	addeq	r3, r3, r2
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d49be:	b213      	sxthne	r3, r2
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d49c0:	bf08      	it	eq
   d49c2:	b21b      	sxtheq	r3, r3
      celsius = (float)raw / 16.0;
   d49c4:	ee00 3a10 	vmov	s0, r3
   d49c8:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d49cc:	e779      	b.n	d48c2 <_ZN7DS18B2014getTemperatureEPhb+0x16>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d49ce:	f023 0303 	bic.w	r3, r3, #3
   d49d2:	e7ca      	b.n	d496a <_ZN7DS18B2014getTemperatureEPhb+0xbe>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d49d4:	f023 0301 	bic.w	r3, r3, #1
   d49d8:	e7c7      	b.n	d496a <_ZN7DS18B2014getTemperatureEPhb+0xbe>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d49da:	79a5      	ldrb	r5, [r4, #6]
   d49dc:	4628      	mov	r0, r5
   d49de:	f001 fa27 	bl	d5e30 <__aeabi_i2d>
   d49e2:	4606      	mov	r6, r0
   d49e4:	7960      	ldrb	r0, [r4, #5]
   d49e6:	10c0      	asrs	r0, r0, #3
   d49e8:	ee07 0a90 	vmov	s15, r0
   d49ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d49f0:	460f      	mov	r7, r1
   d49f2:	ee17 0a90 	vmov	r0, s15
   d49f6:	f001 fa2d 	bl	d5e54 <__aeabi_f2d>
   d49fa:	4b0a      	ldr	r3, [pc, #40]	; (d4a24 <_ZN7DS18B2014getTemperatureEPhb+0x178>)
   d49fc:	2200      	movs	r2, #0
   d49fe:	f001 fa81 	bl	d5f04 <__aeabi_dmul>
   d4a02:	062b      	lsls	r3, r5, #24
   d4a04:	bf54      	ite	pl
   d4a06:	4b08      	ldrpl	r3, [pc, #32]	; (d4a28 <_ZN7DS18B2014getTemperatureEPhb+0x17c>)
   d4a08:	4b08      	ldrmi	r3, [pc, #32]	; (d4a2c <_ZN7DS18B2014getTemperatureEPhb+0x180>)
   d4a0a:	2200      	movs	r2, #0
   d4a0c:	f001 fa7a 	bl	d5f04 <__aeabi_dmul>
   d4a10:	4632      	mov	r2, r6
   d4a12:	463b      	mov	r3, r7
   d4a14:	f001 f8c0 	bl	d5b98 <__adddf3>
   d4a18:	e7b3      	b.n	d4982 <_ZN7DS18B2014getTemperatureEPhb+0xd6>
   d4a1a:	bf00      	nop
   d4a1c:	7fc00000 	.word	0x7fc00000
   d4a20:	3fb00000 	.word	0x3fb00000
   d4a24:	3fa00000 	.word	0x3fa00000
   d4a28:	3ff00000 	.word	0x3ff00000
   d4a2c:	bff00000 	.word	0xbff00000

000d4a30 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d4a30:	b508      	push	{r3, lr}
   d4a32:	ee10 0a10 	vmov	r0, s0
  return celsius * 1.8 + 32.0;
   d4a36:	f001 fa0d 	bl	d5e54 <__aeabi_f2d>
   d4a3a:	a308      	add	r3, pc, #32	; (adr r3, d4a5c <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d4a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a40:	f001 fa60 	bl	d5f04 <__aeabi_dmul>
   d4a44:	4b04      	ldr	r3, [pc, #16]	; (d4a58 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d4a46:	2200      	movs	r2, #0
   d4a48:	f001 f8a6 	bl	d5b98 <__adddf3>
   d4a4c:	f001 fd52 	bl	d64f4 <__aeabi_d2f>
}
   d4a50:	ee00 0a10 	vmov	s0, r0
   d4a54:	bd08      	pop	{r3, pc}
   d4a56:	bf00      	nop
   d4a58:	40400000 	.word	0x40400000
   d4a5c:	cccccccd 	.word	0xcccccccd
   d4a60:	3ffccccc 	.word	0x3ffccccc

000d4a64 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d4a64:	7e02      	ldrb	r2, [r0, #24]
   d4a66:	7e40      	ldrb	r0, [r0, #25]
}
   d4a68:	1a13      	subs	r3, r2, r0
   d4a6a:	4258      	negs	r0, r3
   d4a6c:	4158      	adcs	r0, r3
   d4a6e:	4770      	bx	lr

000d4a70 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <netdb_freeaddrinfo+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	689b      	ldr	r3, [r3, #8]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030268 	.word	0x00030268

000d4a80 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <netdb_getaddrinfo+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	68db      	ldr	r3, [r3, #12]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030268 	.word	0x00030268

000d4a90 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_Pin_Map+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	681b      	ldr	r3, [r3, #0]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003022c 	.word	0x0003022c

000d4aa0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_Pin_Mode+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	689b      	ldr	r3, [r3, #8]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003022c 	.word	0x0003022c

000d4ab0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_Get_Pin_Mode+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	68db      	ldr	r3, [r3, #12]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003022c 	.word	0x0003022c

000d4ac0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_GPIO_Write+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	691b      	ldr	r3, [r3, #16]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003022c 	.word	0x0003022c

000d4ad0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_Interrupts_Enable_All+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6a1b      	ldr	r3, [r3, #32]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003022c 	.word	0x0003022c

000d4ae0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_Interrupts_Disable_All+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003022c 	.word	0x0003022c

000d4af0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_RNG_GetRandomNumber+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	685b      	ldr	r3, [r3, #4]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030218 	.word	0x00030218

000d4b00 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_Delay_Microseconds+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	68db      	ldr	r3, [r3, #12]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030218 	.word	0x00030218

000d4b10 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030218 	.word	0x00030218

000d4b20 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_disable_irq+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030218 	.word	0x00030218

000d4b30 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_enable_irq+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030218 	.word	0x00030218

000d4b40 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <hal_rtc_time_is_valid+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030218 	.word	0x00030218

000d4b50 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <hal_rtc_get_time+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030218 	.word	0x00030218

000d4b60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <os_mutex_recursive_create+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030248 	.word	0x00030248

000d4b70 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <inet_inet_ntop+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	695b      	ldr	r3, [r3, #20]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030264 	.word	0x00030264

000d4b80 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <hal_usart_init+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	681b      	ldr	r3, [r3, #0]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	0003023c 	.word	0x0003023c

000d4b90 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <hal_usart_write+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	68db      	ldr	r3, [r3, #12]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003023c 	.word	0x0003023c

000d4ba0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <hal_usart_available+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	691b      	ldr	r3, [r3, #16]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003023c 	.word	0x0003023c

000d4bb0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <hal_usart_read+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	695b      	ldr	r3, [r3, #20]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003023c 	.word	0x0003023c

000d4bc0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <hal_usart_peek+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	699b      	ldr	r3, [r3, #24]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	0003023c 	.word	0x0003023c

000d4bd0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <hal_usart_flush+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	69db      	ldr	r3, [r3, #28]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	0003023c 	.word	0x0003023c

000d4be0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <hal_usart_is_enabled+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6a1b      	ldr	r3, [r3, #32]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	0003023c 	.word	0x0003023c

000d4bf0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <hal_usart_available_data_for_write+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	0003023c 	.word	0x0003023c

000d4c00 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <hal_i2c_write+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6a1b      	ldr	r3, [r3, #32]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030228 	.word	0x00030228

000d4c10 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <hal_i2c_available+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030228 	.word	0x00030228

000d4c20 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <hal_i2c_read+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030228 	.word	0x00030228

000d4c30 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <hal_i2c_peek+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030228 	.word	0x00030228

000d4c40 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <hal_i2c_flush+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030228 	.word	0x00030228

000d4c50 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <hal_i2c_is_enabled+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030228 	.word	0x00030228

000d4c60 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <hal_i2c_init+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030228 	.word	0x00030228

000d4c70 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <hal_spi_init+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	69db      	ldr	r3, [r3, #28]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030230 	.word	0x00030230

000d4c80 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <hal_spi_is_enabled+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6a1b      	ldr	r3, [r3, #32]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030230 	.word	0x00030230

000d4c90 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <HAL_USB_USART_Init+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	681b      	ldr	r3, [r3, #0]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	0003024c 	.word	0x0003024c

000d4ca0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <HAL_USB_USART_Available_Data+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	691b      	ldr	r3, [r3, #16]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	0003024c 	.word	0x0003024c

000d4cb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	695b      	ldr	r3, [r3, #20]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	0003024c 	.word	0x0003024c

000d4cc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <HAL_USB_USART_Receive_Data+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	699b      	ldr	r3, [r3, #24]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	0003024c 	.word	0x0003024c

000d4cd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <HAL_USB_USART_Send_Data+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	69db      	ldr	r3, [r3, #28]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	0003024c 	.word	0x0003024c

000d4ce0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <HAL_USB_USART_Flush_Data+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	6a1b      	ldr	r3, [r3, #32]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	0003024c 	.word	0x0003024c

000d4cf0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <panic_+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030260 	.word	0x00030260

000d4d00 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <system_mode+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	681b      	ldr	r3, [r3, #0]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030220 	.word	0x00030220

000d4d10 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <set_system_mode+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	685b      	ldr	r3, [r3, #4]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030220 	.word	0x00030220

000d4d20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <system_delay_ms+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	695b      	ldr	r3, [r3, #20]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030220 	.word	0x00030220

000d4d30 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <system_thread_get_state+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030220 	.word	0x00030220

000d4d40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b03      	ldr	r3, [pc, #12]	; (d4d50 <system_ctrl_set_app_request_handler+0x10>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4d4a:	9301      	str	r3, [sp, #4]
   d4d4c:	bd08      	pop	{r3, pc}
   d4d4e:	0000      	.short	0x0000
   d4d50:	00030220 	.word	0x00030220

000d4d54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b03      	ldr	r3, [pc, #12]	; (d4d64 <system_ctrl_set_result+0x10>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4d5e:	9301      	str	r3, [sp, #4]
   d4d60:	bd08      	pop	{r3, pc}
   d4d62:	0000      	.short	0x0000
   d4d64:	00030220 	.word	0x00030220

000d4d68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <network_connect+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	685b      	ldr	r3, [r3, #4]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030240 	.word	0x00030240

000d4d78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <network_connecting+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	689b      	ldr	r3, [r3, #8]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030240 	.word	0x00030240

000d4d88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <network_disconnect+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	68db      	ldr	r3, [r3, #12]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030240 	.word	0x00030240

000d4d98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <network_ready+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	691b      	ldr	r3, [r3, #16]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	00030240 	.word	0x00030240

000d4da8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <network_on+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	695b      	ldr	r3, [r3, #20]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	00030240 	.word	0x00030240

000d4db8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <network_off+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	699b      	ldr	r3, [r3, #24]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030240 	.word	0x00030240

000d4dc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <network_listen+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	69db      	ldr	r3, [r3, #28]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030240 	.word	0x00030240

000d4dd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <network_listening+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	6a1b      	ldr	r3, [r3, #32]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030240 	.word	0x00030240

000d4de8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <network_set_listen_timeout+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030240 	.word	0x00030240

000d4df8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <network_get_listen_timeout+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030240 	.word	0x00030240

000d4e08 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <network_is_on+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030240 	.word	0x00030240

000d4e18 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <network_is_off+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030240 	.word	0x00030240

000d4e28 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <spark_process+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	689b      	ldr	r3, [r3, #8]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030244 	.word	0x00030244

000d4e38 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <spark_cloud_flag_connected+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	695b      	ldr	r3, [r3, #20]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030244 	.word	0x00030244

000d4e48 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <spark_sync_time_pending+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030244 	.word	0x00030244

000d4e58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030244 	.word	0x00030244

000d4e68 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <malloc+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	681b      	ldr	r3, [r3, #0]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	0003021c 	.word	0x0003021c

000d4e78 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <free+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	685b      	ldr	r3, [r3, #4]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	0003021c 	.word	0x0003021c

000d4e88 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <newlib_impure_ptr_callback+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	0003021c 	.word	0x0003021c

000d4e98 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <localtime_r+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	0003021c 	.word	0x0003021c

000d4ea8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	6840      	ldr	r0, [r0, #4]
   d4eac:	4611      	mov	r1, r2
   d4eae:	f7ff bf93 	b.w	d4dd8 <network_listening>

000d4eb2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4eb2:	2200      	movs	r2, #0
   d4eb4:	6840      	ldr	r0, [r0, #4]
   d4eb6:	4611      	mov	r1, r2
   d4eb8:	f7ff bf9e 	b.w	d4df8 <network_get_listen_timeout>

000d4ebc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ebc:	6840      	ldr	r0, [r0, #4]
   d4ebe:	2200      	movs	r2, #0
   d4ec0:	f7ff bf92 	b.w	d4de8 <network_set_listen_timeout>

000d4ec4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ec4:	6840      	ldr	r0, [r0, #4]
   d4ec6:	2200      	movs	r2, #0
   d4ec8:	f081 0101 	eor.w	r1, r1, #1
   d4ecc:	f7ff bf7c 	b.w	d4dc8 <network_listen>

000d4ed0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4ed0:	2300      	movs	r3, #0
   d4ed2:	6840      	ldr	r0, [r0, #4]
   d4ed4:	461a      	mov	r2, r3
   d4ed6:	4619      	mov	r1, r3
   d4ed8:	f7ff bf6e 	b.w	d4db8 <network_off>

000d4edc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4edc:	2300      	movs	r3, #0
   d4ede:	6840      	ldr	r0, [r0, #4]
   d4ee0:	461a      	mov	r2, r3
   d4ee2:	4619      	mov	r1, r3
   d4ee4:	f7ff bf60 	b.w	d4da8 <network_on>

000d4ee8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	6840      	ldr	r0, [r0, #4]
   d4eec:	4611      	mov	r1, r2
   d4eee:	f7ff bf53 	b.w	d4d98 <network_ready>

000d4ef2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	4611      	mov	r1, r2
   d4ef8:	f7ff bf3e 	b.w	d4d78 <network_connecting>

000d4efc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4efc:	6840      	ldr	r0, [r0, #4]
   d4efe:	2200      	movs	r2, #0
   d4f00:	2102      	movs	r1, #2
   d4f02:	f7ff bf41 	b.w	d4d88 <network_disconnect>

000d4f06 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4f06:	2300      	movs	r3, #0
   d4f08:	6840      	ldr	r0, [r0, #4]
   d4f0a:	461a      	mov	r2, r3
   d4f0c:	f7ff bf2c 	b.w	d4d68 <network_connect>

000d4f10 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f10:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f12:	2203      	movs	r2, #3
   d4f14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f16:	4a02      	ldr	r2, [pc, #8]	; (d4f20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f18:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4f1a:	4770      	bx	lr
   d4f1c:	2003e670 	.word	0x2003e670
   d4f20:	000d6728 	.word	0x000d6728

000d4f24 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4f24:	b510      	push	{r4, lr}
   d4f26:	4604      	mov	r4, r0
   d4f28:	4608      	mov	r0, r1
{
    _spi = spi;
   d4f2a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4f2c:	f7ff fea0 	bl	d4c70 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4f30:	2300      	movs	r3, #0
   d4f32:	6063      	str	r3, [r4, #4]
}
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd10      	pop	{r4, pc}

000d4f38 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4f38:	4b05      	ldr	r3, [pc, #20]	; (d4f50 <_GLOBAL__sub_I_System+0x18>)
   d4f3a:	2202      	movs	r2, #2
   d4f3c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f3e:	4b05      	ldr	r3, [pc, #20]	; (d4f54 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4f40:	4a05      	ldr	r2, [pc, #20]	; (d4f58 <_GLOBAL__sub_I_System+0x20>)
   d4f42:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4f44:	2000      	movs	r0, #0
   d4f46:	6018      	str	r0, [r3, #0]
   d4f48:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4f4a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f4c:	f7ff bee0 	b.w	d4d10 <set_system_mode>
   d4f50:	2003e684 	.word	0x2003e684
   d4f54:	2003e678 	.word	0x2003e678
   d4f58:	ffff0000 	.word	0xffff0000

000d4f5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f5c:	4802      	ldr	r0, [pc, #8]	; (d4f68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4f5e:	2300      	movs	r3, #0
   d4f60:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f62:	f7ff bdfd 	b.w	d4b60 <os_mutex_recursive_create>
   d4f66:	bf00      	nop
   d4f68:	2003e688 	.word	0x2003e688

000d4f6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f6e:	4606      	mov	r6, r0
   d4f70:	460d      	mov	r5, r1
  size_t n = 0;
   d4f72:	188f      	adds	r7, r1, r2
   d4f74:	2400      	movs	r4, #0
  while (size--) {
   d4f76:	42bd      	cmp	r5, r7
   d4f78:	d00c      	beq.n	d4f94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f7a:	6833      	ldr	r3, [r6, #0]
   d4f7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f80:	689b      	ldr	r3, [r3, #8]
   d4f82:	4630      	mov	r0, r6
   d4f84:	4798      	blx	r3
     if (chunk>=0)
   d4f86:	1e03      	subs	r3, r0, #0
   d4f88:	db01      	blt.n	d4f8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f8a:	441c      	add	r4, r3
  while (size--) {
   d4f8c:	e7f3      	b.n	d4f76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f8e:	2c00      	cmp	r4, #0
   d4f90:	bf08      	it	eq
   d4f92:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f94:	4620      	mov	r0, r4
   d4f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f98:	b513      	push	{r0, r1, r4, lr}
   d4f9a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4f9c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4f9e:	b159      	cbz	r1, d4fb8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4fa0:	9101      	str	r1, [sp, #4]
   d4fa2:	f001 fb37 	bl	d6614 <strlen>
   d4fa6:	6823      	ldr	r3, [r4, #0]
   d4fa8:	9901      	ldr	r1, [sp, #4]
   d4faa:	68db      	ldr	r3, [r3, #12]
   d4fac:	4602      	mov	r2, r0
   d4fae:	4620      	mov	r0, r4
    }
   d4fb0:	b002      	add	sp, #8
   d4fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4fb6:	4718      	bx	r3
    }
   d4fb8:	b002      	add	sp, #8
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4fbc:	b508      	push	{r3, lr}
  return write(str);
   d4fbe:	f7ff ffeb 	bl	d4f98 <_ZN5Print5writeEPKc>
}
   d4fc2:	bd08      	pop	{r3, pc}

000d4fc4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4fc4:	6803      	ldr	r3, [r0, #0]
   d4fc6:	689b      	ldr	r3, [r3, #8]
   d4fc8:	4718      	bx	r3

000d4fca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4fca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4fcc:	210d      	movs	r1, #13
{
   d4fce:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4fd0:	f7ff fff8 	bl	d4fc4 <_ZN5Print5printEc>
  n += print('\n');
   d4fd4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4fd6:	4604      	mov	r4, r0
  n += print('\n');
   d4fd8:	4628      	mov	r0, r5
   d4fda:	f7ff fff3 	bl	d4fc4 <_ZN5Print5printEc>
  return n;
}
   d4fde:	4420      	add	r0, r4
   d4fe0:	bd38      	pop	{r3, r4, r5, pc}

000d4fe2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4fe2:	b538      	push	{r3, r4, r5, lr}
   d4fe4:	4605      	mov	r5, r0
  return write(str);
   d4fe6:	f7ff ffd7 	bl	d4f98 <_ZN5Print5writeEPKc>
   d4fea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4fec:	4628      	mov	r0, r5
   d4fee:	f7ff ffec 	bl	d4fca <_ZN5Print7printlnEv>
  return n;
}
   d4ff2:	4420      	add	r0, r4
   d4ff4:	bd38      	pop	{r3, r4, r5, pc}

000d4ff6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ff6:	b530      	push	{r4, r5, lr}
   d4ff8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5000:	2a01      	cmp	r2, #1
   d5002:	bf98      	it	ls
   d5004:	220a      	movls	r2, #10
   d5006:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5008:	460d      	mov	r5, r1
   d500a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d500e:	fb01 5312 	mls	r3, r1, r2, r5
   d5012:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5016:	2b09      	cmp	r3, #9
   d5018:	bf94      	ite	ls
   d501a:	3330      	addls	r3, #48	; 0x30
   d501c:	3337      	addhi	r3, #55	; 0x37
   d501e:	b2db      	uxtb	r3, r3
  } while(n);
   d5020:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5022:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5026:	d9ef      	bls.n	d5008 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5028:	4621      	mov	r1, r4
   d502a:	f7ff ffb5 	bl	d4f98 <_ZN5Print5writeEPKc>
}
   d502e:	b00b      	add	sp, #44	; 0x2c
   d5030:	bd30      	pop	{r4, r5, pc}
	...

000d5034 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5038:	ec55 4b10 	vmov	r4, r5, d0
   d503c:	4606      	mov	r6, r0
   d503e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5040:	ee10 2a10 	vmov	r2, s0
   d5044:	ee10 0a10 	vmov	r0, s0
   d5048:	462b      	mov	r3, r5
   d504a:	4629      	mov	r1, r5
   d504c:	f001 f9f4 	bl	d6438 <__aeabi_dcmpun>
   d5050:	b140      	cbz	r0, d5064 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5052:	4953      	ldr	r1, [pc, #332]	; (d51a0 <_ZN5Print10printFloatEdh+0x16c>)
   d5054:	4630      	mov	r0, r6
   d5056:	f7ff ff9f 	bl	d4f98 <_ZN5Print5writeEPKc>
   d505a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d505c:	4650      	mov	r0, sl
   d505e:	b003      	add	sp, #12
   d5060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5064:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5068:	4b4e      	ldr	r3, [pc, #312]	; (d51a4 <_ZN5Print10printFloatEdh+0x170>)
   d506a:	f04f 32ff 	mov.w	r2, #4294967295
   d506e:	4620      	mov	r0, r4
   d5070:	4649      	mov	r1, r9
   d5072:	f001 f9e1 	bl	d6438 <__aeabi_dcmpun>
   d5076:	b948      	cbnz	r0, d508c <_ZN5Print10printFloatEdh+0x58>
   d5078:	4b4a      	ldr	r3, [pc, #296]	; (d51a4 <_ZN5Print10printFloatEdh+0x170>)
   d507a:	f04f 32ff 	mov.w	r2, #4294967295
   d507e:	4620      	mov	r0, r4
   d5080:	4649      	mov	r1, r9
   d5082:	f001 f9bb 	bl	d63fc <__aeabi_dcmple>
   d5086:	b908      	cbnz	r0, d508c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5088:	4947      	ldr	r1, [pc, #284]	; (d51a8 <_ZN5Print10printFloatEdh+0x174>)
   d508a:	e7e3      	b.n	d5054 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d508c:	4b47      	ldr	r3, [pc, #284]	; (d51ac <_ZN5Print10printFloatEdh+0x178>)
   d508e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5092:	4620      	mov	r0, r4
   d5094:	4629      	mov	r1, r5
   d5096:	f001 f9c5 	bl	d6424 <__aeabi_dcmpgt>
   d509a:	b108      	cbz	r0, d50a0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d509c:	4944      	ldr	r1, [pc, #272]	; (d51b0 <_ZN5Print10printFloatEdh+0x17c>)
   d509e:	e7d9      	b.n	d5054 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d50a0:	4b44      	ldr	r3, [pc, #272]	; (d51b4 <_ZN5Print10printFloatEdh+0x180>)
   d50a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d50a6:	4620      	mov	r0, r4
   d50a8:	4629      	mov	r1, r5
   d50aa:	f001 f99d 	bl	d63e8 <__aeabi_dcmplt>
   d50ae:	2800      	cmp	r0, #0
   d50b0:	d1f4      	bne.n	d509c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d50b2:	2200      	movs	r2, #0
   d50b4:	2300      	movs	r3, #0
   d50b6:	4620      	mov	r0, r4
   d50b8:	4629      	mov	r1, r5
   d50ba:	f001 f995 	bl	d63e8 <__aeabi_dcmplt>
   d50be:	b1d0      	cbz	r0, d50f6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d50c0:	212d      	movs	r1, #45	; 0x2d
   d50c2:	4630      	mov	r0, r6
   d50c4:	f7ff ff7e 	bl	d4fc4 <_ZN5Print5printEc>
     number = -number;
   d50c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d50cc:	4682      	mov	sl, r0
     number = -number;
   d50ce:	461d      	mov	r5, r3
  double rounding = 0.5;
   d50d0:	4939      	ldr	r1, [pc, #228]	; (d51b8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d50d2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d51c0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d50d6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d50da:	2000      	movs	r0, #0
    rounding /= 10.0;
   d50dc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d50e0:	fa5f f38b 	uxtb.w	r3, fp
   d50e4:	429f      	cmp	r7, r3
   d50e6:	d908      	bls.n	d50fa <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d50e8:	4642      	mov	r2, r8
   d50ea:	464b      	mov	r3, r9
   d50ec:	f001 f834 	bl	d6158 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d50f0:	f10b 0b01 	add.w	fp, fp, #1
   d50f4:	e7f4      	b.n	d50e0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d50f6:	4682      	mov	sl, r0
   d50f8:	e7ea      	b.n	d50d0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d50fa:	4622      	mov	r2, r4
   d50fc:	462b      	mov	r3, r5
   d50fe:	f000 fd4b 	bl	d5b98 <__adddf3>
   d5102:	460d      	mov	r5, r1
   d5104:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5106:	f001 f9d5 	bl	d64b4 <__aeabi_d2uiz>
   d510a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d510c:	f000 fe80 	bl	d5e10 <__aeabi_ui2d>
   d5110:	4602      	mov	r2, r0
   d5112:	460b      	mov	r3, r1
   d5114:	4620      	mov	r0, r4
   d5116:	4629      	mov	r1, r5
   d5118:	f000 fd3c 	bl	d5b94 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d511c:	220a      	movs	r2, #10
   d511e:	4604      	mov	r4, r0
   d5120:	460d      	mov	r5, r1
   d5122:	4630      	mov	r0, r6
   d5124:	4641      	mov	r1, r8
   d5126:	f7ff ff66 	bl	d4ff6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d512a:	4482      	add	sl, r0
  if (digits > 0) {
   d512c:	b127      	cbz	r7, d5138 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d512e:	4923      	ldr	r1, [pc, #140]	; (d51bc <_ZN5Print10printFloatEdh+0x188>)
   d5130:	4630      	mov	r0, r6
   d5132:	f7ff ff31 	bl	d4f98 <_ZN5Print5writeEPKc>
    n += print(".");
   d5136:	4482      	add	sl, r0
    remainder *= 10.0;
   d5138:	f8df 9084 	ldr.w	r9, [pc, #132]	; d51c0 <_ZN5Print10printFloatEdh+0x18c>
   d513c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5140:	3f01      	subs	r7, #1
   d5142:	b2ff      	uxtb	r7, r7
   d5144:	2fff      	cmp	r7, #255	; 0xff
   d5146:	d089      	beq.n	d505c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5148:	4642      	mov	r2, r8
   d514a:	464b      	mov	r3, r9
   d514c:	4620      	mov	r0, r4
   d514e:	4629      	mov	r1, r5
   d5150:	f000 fed8 	bl	d5f04 <__aeabi_dmul>
   d5154:	4604      	mov	r4, r0
   d5156:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5158:	f001 f984 	bl	d6464 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d515c:	f1b0 0b00 	subs.w	fp, r0, #0
   d5160:	da1a      	bge.n	d5198 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5162:	212d      	movs	r1, #45	; 0x2d
   d5164:	4630      	mov	r0, r6
   d5166:	f7ff ff2d 	bl	d4fc4 <_ZN5Print5printEc>
            val = -n;
   d516a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d516e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5170:	220a      	movs	r2, #10
   d5172:	4630      	mov	r0, r6
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	f7ff ff3e 	bl	d4ff6 <_ZN5Print11printNumberEmh>
   d517a:	9b01      	ldr	r3, [sp, #4]
   d517c:	4418      	add	r0, r3
    n += print(toPrint);
   d517e:	4482      	add	sl, r0
    remainder -= toPrint;
   d5180:	4658      	mov	r0, fp
   d5182:	f000 fe55 	bl	d5e30 <__aeabi_i2d>
   d5186:	4602      	mov	r2, r0
   d5188:	460b      	mov	r3, r1
   d518a:	4620      	mov	r0, r4
   d518c:	4629      	mov	r1, r5
   d518e:	f000 fd01 	bl	d5b94 <__aeabi_dsub>
   d5192:	4604      	mov	r4, r0
   d5194:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5196:	e7d3      	b.n	d5140 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5198:	4659      	mov	r1, fp
        size_t t = 0;
   d519a:	2300      	movs	r3, #0
   d519c:	e7e8      	b.n	d5170 <_ZN5Print10printFloatEdh+0x13c>
   d519e:	bf00      	nop
   d51a0:	000d675c 	.word	0x000d675c
   d51a4:	7fefffff 	.word	0x7fefffff
   d51a8:	000d6760 	.word	0x000d6760
   d51ac:	41efffff 	.word	0x41efffff
   d51b0:	000d6764 	.word	0x000d6764
   d51b4:	c1efffff 	.word	0xc1efffff
   d51b8:	3fe00000 	.word	0x3fe00000
   d51bc:	000d6768 	.word	0x000d6768
   d51c0:	40240000 	.word	0x40240000

000d51c4 <_ZN5Print7printlnEdi>:
{
   d51c4:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d51c6:	b2c9      	uxtb	r1, r1
{
   d51c8:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d51ca:	f7ff ff33 	bl	d5034 <_ZN5Print10printFloatEdh>
   d51ce:	4604      	mov	r4, r0
  n += println();
   d51d0:	4628      	mov	r0, r5
   d51d2:	f7ff fefa 	bl	d4fca <_ZN5Print7printlnEv>
}
   d51d6:	4420      	add	r0, r4
   d51d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d51dc:	4b01      	ldr	r3, [pc, #4]	; (d51e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d51de:	4a02      	ldr	r2, [pc, #8]	; (d51e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d51e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d51e2:	4770      	bx	lr
   d51e4:	2003e68c 	.word	0x2003e68c
   d51e8:	000d676a 	.word	0x000d676a

000d51ec <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d51ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d51f0:	4a15      	ldr	r2, [pc, #84]	; (d5248 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d51f2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d5254 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d51f6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d51fa:	18c0      	adds	r0, r0, r3
   d51fc:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d5200:	4a12      	ldr	r2, [pc, #72]	; (d524c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d5202:	e9d2 3200 	ldrd	r3, r2, [r2]
   d5206:	18c6      	adds	r6, r0, r3
   d5208:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d520c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d5210:	42bb      	cmp	r3, r7
   d5212:	bf08      	it	eq
   d5214:	42b2      	cmpeq	r2, r6
{
   d5216:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d5218:	d013      	beq.n	d5242 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d521a:	a903      	add	r1, sp, #12
   d521c:	4668      	mov	r0, sp
   d521e:	e9cd 6700 	strd	r6, r7, [sp]
   d5222:	f7ff fe39 	bl	d4e98 <localtime_r>
	calendar_time.tm_year += 1900;
   d5226:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5228:	4d09      	ldr	r5, [pc, #36]	; (d5250 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d522a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d522e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d5230:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d523a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d523e:	6823      	ldr	r3, [r4, #0]
   d5240:	602b      	str	r3, [r5, #0]
    }
}
   d5242:	b00c      	add	sp, #48	; 0x30
   d5244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5248:	2003e6c0 	.word	0x2003e6c0
   d524c:	2003e6b8 	.word	0x2003e6b8
   d5250:	2003e694 	.word	0x2003e694
   d5254:	2003e6c8 	.word	0x2003e6c8

000d5258 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5258:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d525a:	2000      	movs	r0, #0
   d525c:	f7ff fdf4 	bl	d4e48 <spark_sync_time_pending>
   d5260:	b128      	cbz	r0, d526e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5262:	f7ff fde9 	bl	d4e38 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5266:	f080 0001 	eor.w	r0, r0, #1
   d526a:	b2c0      	uxtb	r0, r0
    }
   d526c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d526e:	2001      	movs	r0, #1
   d5270:	e7fc      	b.n	d526c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d5274 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d5274:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5276:	f7ff ffb9 	bl	d51ec <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <_ZN9TimeClass5monthEx+0x10>)
   d527c:	6918      	ldr	r0, [r3, #16]
}
   d527e:	3001      	adds	r0, #1
   d5280:	bd08      	pop	{r3, pc}
   d5282:	bf00      	nop
   d5284:	2003e694 	.word	0x2003e694

000d5288 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5288:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d528a:	2000      	movs	r0, #0
   d528c:	f7ff fc58 	bl	d4b40 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5290:	4604      	mov	r4, r0
   d5292:	b9a0      	cbnz	r0, d52be <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5294:	f7ff fd34 	bl	d4d00 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5298:	2801      	cmp	r0, #1
   d529a:	d110      	bne.n	d52be <_ZN9TimeClass7isValidEv+0x36>
   d529c:	4620      	mov	r0, r4
   d529e:	f7ff fd47 	bl	d4d30 <system_thread_get_state>
   d52a2:	b960      	cbnz	r0, d52be <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d52a4:	f7ff ffd8 	bl	d5258 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d52a8:	b910      	cbnz	r0, d52b0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d52aa:	f7ff fdbd 	bl	d4e28 <spark_process>
        while (_while() && !_condition()) {
   d52ae:	e7f9      	b.n	d52a4 <_ZN9TimeClass7isValidEv+0x1c>
   d52b0:	f7ff ffd2 	bl	d5258 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d52b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d52b8:	2000      	movs	r0, #0
   d52ba:	f7ff bc41 	b.w	d4b40 <hal_rtc_time_is_valid>
}
   d52be:	4620      	mov	r0, r4
   d52c0:	bd10      	pop	{r4, pc}

000d52c2 <_ZN9TimeClass3nowEv>:
{
   d52c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d52c4:	f7ff ffe0 	bl	d5288 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d52c8:	2210      	movs	r2, #16
   d52ca:	2100      	movs	r1, #0
   d52cc:	4668      	mov	r0, sp
   d52ce:	f001 f975 	bl	d65bc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d52d2:	2100      	movs	r1, #0
   d52d4:	4668      	mov	r0, sp
   d52d6:	f7ff fc3b 	bl	d4b50 <hal_rtc_get_time>
}
   d52da:	9800      	ldr	r0, [sp, #0]
   d52dc:	b005      	add	sp, #20
   d52de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52e4 <_ZN9TimeClass4hourEv>:
{
   d52e4:	b508      	push	{r3, lr}
	return hour(now());
   d52e6:	f7ff ffec 	bl	d52c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d52ea:	17c1      	asrs	r1, r0, #31
   d52ec:	f7ff ff7e 	bl	d51ec <_ZL22Refresh_UnixTime_Cachex>
}
   d52f0:	4b01      	ldr	r3, [pc, #4]	; (d52f8 <_ZN9TimeClass4hourEv+0x14>)
   d52f2:	6898      	ldr	r0, [r3, #8]
   d52f4:	bd08      	pop	{r3, pc}
   d52f6:	bf00      	nop
   d52f8:	2003e694 	.word	0x2003e694

000d52fc <_ZN9TimeClass6minuteEv>:
{
   d52fc:	b508      	push	{r3, lr}
	return minute(now());
   d52fe:	f7ff ffe0 	bl	d52c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d5302:	17c1      	asrs	r1, r0, #31
   d5304:	f7ff ff72 	bl	d51ec <_ZL22Refresh_UnixTime_Cachex>
}
   d5308:	4b01      	ldr	r3, [pc, #4]	; (d5310 <_ZN9TimeClass6minuteEv+0x14>)
   d530a:	6858      	ldr	r0, [r3, #4]
   d530c:	bd08      	pop	{r3, pc}
   d530e:	bf00      	nop
   d5310:	2003e694 	.word	0x2003e694

000d5314 <_ZN9TimeClass6secondEv>:
{
   d5314:	b508      	push	{r3, lr}
	return second(now());
   d5316:	f7ff ffd4 	bl	d52c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d531a:	17c1      	asrs	r1, r0, #31
   d531c:	f7ff ff66 	bl	d51ec <_ZL22Refresh_UnixTime_Cachex>
}
   d5320:	4b01      	ldr	r3, [pc, #4]	; (d5328 <_ZN9TimeClass6secondEv+0x14>)
   d5322:	6818      	ldr	r0, [r3, #0]
   d5324:	bd08      	pop	{r3, pc}
   d5326:	bf00      	nop
   d5328:	2003e694 	.word	0x2003e694

000d532c <_ZN9TimeClass3dayEv>:
{
   d532c:	b508      	push	{r3, lr}
	return day(now());
   d532e:	f7ff ffc8 	bl	d52c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d5332:	17c1      	asrs	r1, r0, #31
   d5334:	f7ff ff5a 	bl	d51ec <_ZL22Refresh_UnixTime_Cachex>
}
   d5338:	4b01      	ldr	r3, [pc, #4]	; (d5340 <_ZN9TimeClass3dayEv+0x14>)
   d533a:	68d8      	ldr	r0, [r3, #12]
   d533c:	bd08      	pop	{r3, pc}
   d533e:	bf00      	nop
   d5340:	2003e694 	.word	0x2003e694

000d5344 <_ZN9TimeClass5monthEv>:
{
   d5344:	b508      	push	{r3, lr}
	return month(now());
   d5346:	f7ff ffbc 	bl	d52c2 <_ZN9TimeClass3nowEv>
}
   d534a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d534e:	17c1      	asrs	r1, r0, #31
   d5350:	f7ff bf90 	b.w	d5274 <_ZN9TimeClass5monthEx>

000d5354 <_ZN9TimeClass4yearEv>:
{
   d5354:	b508      	push	{r3, lr}
	return year(now());
   d5356:	f7ff ffb4 	bl	d52c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d535a:	17c1      	asrs	r1, r0, #31
   d535c:	f7ff ff46 	bl	d51ec <_ZL22Refresh_UnixTime_Cachex>
}
   d5360:	4b01      	ldr	r3, [pc, #4]	; (d5368 <_ZN9TimeClass4yearEv+0x14>)
   d5362:	6958      	ldr	r0, [r3, #20]
   d5364:	bd08      	pop	{r3, pc}
   d5366:	bf00      	nop
   d5368:	2003e694 	.word	0x2003e694

000d536c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d536c:	4b02      	ldr	r3, [pc, #8]	; (d5378 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	4b02      	ldr	r3, [pc, #8]	; (d537c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5372:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5374:	4770      	bx	lr
   d5376:	bf00      	nop
   d5378:	2003e5d0 	.word	0x2003e5d0
   d537c:	2003e690 	.word	0x2003e690

000d5380 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5380:	2100      	movs	r1, #0
   d5382:	f7ff bccd 	b.w	d4d20 <system_delay_ms>
	...

000d5388 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5388:	4b01      	ldr	r3, [pc, #4]	; (d5390 <_GLOBAL__sub_I_RGB+0x8>)
   d538a:	2200      	movs	r2, #0
   d538c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d538e:	4770      	bx	lr
   d5390:	2003e6d0 	.word	0x2003e6d0

000d5394 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5394:	4b01      	ldr	r3, [pc, #4]	; (d539c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5396:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5398:	4770      	bx	lr
   d539a:	bf00      	nop
   d539c:	2003e5d4 	.word	0x2003e5d4

000d53a0 <serialEventRun>:
{
   d53a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d53a2:	4b0b      	ldr	r3, [pc, #44]	; (d53d0 <serialEventRun+0x30>)
   d53a4:	b143      	cbz	r3, d53b8 <serialEventRun+0x18>
   d53a6:	f000 f95d 	bl	d5664 <_Z16_fetch_usbserialv>
   d53aa:	6803      	ldr	r3, [r0, #0]
   d53ac:	691b      	ldr	r3, [r3, #16]
   d53ae:	4798      	blx	r3
   d53b0:	2800      	cmp	r0, #0
   d53b2:	dd01      	ble.n	d53b8 <serialEventRun+0x18>
        serialEvent();
   d53b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d53b8:	4b06      	ldr	r3, [pc, #24]	; (d53d4 <serialEventRun+0x34>)
   d53ba:	b143      	cbz	r3, d53ce <serialEventRun+0x2e>
   d53bc:	f000 f9d0 	bl	d5760 <_Z22__fetch_global_Serial1v>
   d53c0:	6803      	ldr	r3, [r0, #0]
   d53c2:	691b      	ldr	r3, [r3, #16]
   d53c4:	4798      	blx	r3
   d53c6:	2800      	cmp	r0, #0
   d53c8:	dd01      	ble.n	d53ce <serialEventRun+0x2e>
        serialEvent1();
   d53ca:	f3af 8000 	nop.w
}
   d53ce:	bd08      	pop	{r3, pc}
	...

000d53d8 <_post_loop>:
{
   d53d8:	b508      	push	{r3, lr}
	serialEventRun();
   d53da:	f7ff ffe1 	bl	d53a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53de:	f7ff fb97 	bl	d4b10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53e2:	4b01      	ldr	r3, [pc, #4]	; (d53e8 <_post_loop+0x10>)
   d53e4:	6018      	str	r0, [r3, #0]
}
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	2003e73c 	.word	0x2003e73c

000d53ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d53ec:	4805      	ldr	r0, [pc, #20]	; (d5404 <_Z33system_initialize_user_backup_ramv+0x18>)
   d53ee:	4a06      	ldr	r2, [pc, #24]	; (d5408 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d53f0:	4906      	ldr	r1, [pc, #24]	; (d540c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d53f2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d53f4:	1a12      	subs	r2, r2, r0
   d53f6:	f001 f8d3 	bl	d65a0 <memcpy>
    __backup_sram_signature = signature;
   d53fa:	4b05      	ldr	r3, [pc, #20]	; (d5410 <_Z33system_initialize_user_backup_ramv+0x24>)
   d53fc:	4a05      	ldr	r2, [pc, #20]	; (d5414 <_Z33system_initialize_user_backup_ramv+0x28>)
   d53fe:	601a      	str	r2, [r3, #0]
}
   d5400:	bd08      	pop	{r3, pc}
   d5402:	bf00      	nop
   d5404:	2003f400 	.word	0x2003f400
   d5408:	2003f414 	.word	0x2003f414
   d540c:	000d68d0 	.word	0x000d68d0
   d5410:	2003f410 	.word	0x2003f410
   d5414:	9a271c1e 	.word	0x9a271c1e

000d5418 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5418:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d541a:	2300      	movs	r3, #0
   d541c:	9300      	str	r3, [sp, #0]
   d541e:	461a      	mov	r2, r3
   d5420:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5424:	f7ff fc96 	bl	d4d54 <system_ctrl_set_result>
}
   d5428:	b003      	add	sp, #12
   d542a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5430 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5430:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5432:	8843      	ldrh	r3, [r0, #2]
   d5434:	2b0a      	cmp	r3, #10
   d5436:	d008      	beq.n	d544a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5438:	2b50      	cmp	r3, #80	; 0x50
   d543a:	d10b      	bne.n	d5454 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d543c:	4b09      	ldr	r3, [pc, #36]	; (d5464 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d543e:	681b      	ldr	r3, [r3, #0]
   d5440:	b14b      	cbz	r3, d5456 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5442:	b003      	add	sp, #12
   d5444:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5448:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d544a:	f7ff ffe5 	bl	d5418 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d544e:	b003      	add	sp, #12
   d5450:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5454:	2300      	movs	r3, #0
   d5456:	9300      	str	r3, [sp, #0]
   d5458:	461a      	mov	r2, r3
   d545a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d545e:	f7ff fc79 	bl	d4d54 <system_ctrl_set_result>
}
   d5462:	e7f4      	b.n	d544e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5464:	2003e6e4 	.word	0x2003e6e4

000d5468 <module_user_init_hook>:
{
   d5468:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d546a:	4812      	ldr	r0, [pc, #72]	; (d54b4 <module_user_init_hook+0x4c>)
   d546c:	2100      	movs	r1, #0
   d546e:	f7ff fd0b 	bl	d4e88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5472:	4b11      	ldr	r3, [pc, #68]	; (d54b8 <module_user_init_hook+0x50>)
   d5474:	681a      	ldr	r2, [r3, #0]
   d5476:	4b11      	ldr	r3, [pc, #68]	; (d54bc <module_user_init_hook+0x54>)
   d5478:	429a      	cmp	r2, r3
   d547a:	4b11      	ldr	r3, [pc, #68]	; (d54c0 <module_user_init_hook+0x58>)
   d547c:	bf0c      	ite	eq
   d547e:	2201      	moveq	r2, #1
   d5480:	2200      	movne	r2, #0
   d5482:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5484:	d001      	beq.n	d548a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5486:	f7ff ffb1 	bl	d53ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d548a:	f7ff fb31 	bl	d4af0 <HAL_RNG_GetRandomNumber>
   d548e:	4604      	mov	r4, r0
    srand(seed);
   d5490:	f001 f89c 	bl	d65cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5494:	4b0b      	ldr	r3, [pc, #44]	; (d54c4 <module_user_init_hook+0x5c>)
   d5496:	b113      	cbz	r3, d549e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5498:	4620      	mov	r0, r4
   d549a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d549e:	2100      	movs	r1, #0
   d54a0:	4808      	ldr	r0, [pc, #32]	; (d54c4 <module_user_init_hook+0x5c>)
   d54a2:	f7ff fcd9 	bl	d4e58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d54a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d54aa:	4807      	ldr	r0, [pc, #28]	; (d54c8 <module_user_init_hook+0x60>)
   d54ac:	2100      	movs	r1, #0
   d54ae:	f7ff bc47 	b.w	d4d40 <system_ctrl_set_app_request_handler>
   d54b2:	bf00      	nop
   d54b4:	000d5395 	.word	0x000d5395
   d54b8:	2003f410 	.word	0x2003f410
   d54bc:	9a271c1e 	.word	0x9a271c1e
   d54c0:	2003e6e0 	.word	0x2003e6e0
   d54c4:	00000000 	.word	0x00000000
   d54c8:	000d5431 	.word	0x000d5431

000d54cc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54cc:	4770      	bx	lr

000d54ce <_ZN9IPAddressD0Ev>:
   d54ce:	b510      	push	{r4, lr}
   d54d0:	2118      	movs	r1, #24
   d54d2:	4604      	mov	r4, r0
   d54d4:	f000 fb56 	bl	d5b84 <_ZdlPvj>
   d54d8:	4620      	mov	r0, r4
   d54da:	bd10      	pop	{r4, pc}

000d54dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54de:	7d03      	ldrb	r3, [r0, #20]
   d54e0:	2b06      	cmp	r3, #6
{
   d54e2:	b08d      	sub	sp, #52	; 0x34
   d54e4:	460e      	mov	r6, r1
   d54e6:	f100 0704 	add.w	r7, r0, #4
   d54ea:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d54ee:	d012      	beq.n	d5516 <_ZNK9IPAddress7printToER5Print+0x3a>
   d54f0:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d54f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54f8:	220a      	movs	r2, #10
   d54fa:	4630      	mov	r0, r6
   d54fc:	f7ff fd7b 	bl	d4ff6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5500:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5502:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5504:	d019      	beq.n	d553a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5506:	2c00      	cmp	r4, #0
   d5508:	d0f4      	beq.n	d54f4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d550a:	212e      	movs	r1, #46	; 0x2e
   d550c:	4630      	mov	r0, r6
   d550e:	f7ff fd59 	bl	d4fc4 <_ZN5Print5printEc>
   d5512:	4404      	add	r4, r0
   d5514:	e7ee      	b.n	d54f4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5516:	232f      	movs	r3, #47	; 0x2f
   d5518:	466a      	mov	r2, sp
   d551a:	4639      	mov	r1, r7
   d551c:	200a      	movs	r0, #10
		buf[0] = 0;
   d551e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5522:	f7ff fb25 	bl	d4b70 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5526:	4668      	mov	r0, sp
   d5528:	f001 f874 	bl	d6614 <strlen>
   d552c:	6833      	ldr	r3, [r6, #0]
   d552e:	4602      	mov	r2, r0
   d5530:	68db      	ldr	r3, [r3, #12]
   d5532:	4669      	mov	r1, sp
   d5534:	4630      	mov	r0, r6
   d5536:	4798      	blx	r3
   d5538:	4604      	mov	r4, r0
    }
    return n;
}
   d553a:	4620      	mov	r0, r4
   d553c:	b00d      	add	sp, #52	; 0x34
   d553e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5540 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5540:	b510      	push	{r4, lr}
   d5542:	4b05      	ldr	r3, [pc, #20]	; (d5558 <_ZN9IPAddressC1Ev+0x18>)
   d5544:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5546:	2211      	movs	r2, #17
   d5548:	f840 3b04 	str.w	r3, [r0], #4
   d554c:	2100      	movs	r1, #0
   d554e:	f001 f835 	bl	d65bc <memset>
}
   d5552:	4620      	mov	r0, r4
   d5554:	bd10      	pop	{r4, pc}
   d5556:	bf00      	nop
   d5558:	000d6794 	.word	0x000d6794

000d555c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d555c:	4603      	mov	r3, r0
   d555e:	4a07      	ldr	r2, [pc, #28]	; (d557c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5560:	b510      	push	{r4, lr}
   d5562:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5566:	f101 0210 	add.w	r2, r1, #16
   d556a:	f851 4b04 	ldr.w	r4, [r1], #4
   d556e:	f843 4b04 	str.w	r4, [r3], #4
   d5572:	4291      	cmp	r1, r2
   d5574:	d1f9      	bne.n	d556a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5576:	780a      	ldrb	r2, [r1, #0]
   d5578:	701a      	strb	r2, [r3, #0]
}
   d557a:	bd10      	pop	{r4, pc}
   d557c:	000d6794 	.word	0x000d6794

000d5580 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5580:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5582:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5586:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d558a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d558e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5592:	2304      	movs	r3, #4
   d5594:	6041      	str	r1, [r0, #4]
   d5596:	7503      	strb	r3, [r0, #20]
}
   d5598:	bd10      	pop	{r4, pc}

000d559a <_ZN9IPAddressaSEPKh>:
{
   d559a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d559c:	78cb      	ldrb	r3, [r1, #3]
   d559e:	9300      	str	r3, [sp, #0]
   d55a0:	788b      	ldrb	r3, [r1, #2]
   d55a2:	784a      	ldrb	r2, [r1, #1]
   d55a4:	7809      	ldrb	r1, [r1, #0]
   d55a6:	f7ff ffeb 	bl	d5580 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d55aa:	b002      	add	sp, #8
   d55ac:	bd10      	pop	{r4, pc}

000d55ae <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55ae:	7441      	strb	r1, [r0, #17]
}
   d55b0:	4770      	bx	lr

000d55b2 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55b2:	4770      	bx	lr

000d55b4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55b4:	4770      	bx	lr

000d55b6 <_ZN9USBSerial4readEv>:
{
   d55b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55b8:	2100      	movs	r1, #0
   d55ba:	7c00      	ldrb	r0, [r0, #16]
   d55bc:	f7ff fb80 	bl	d4cc0 <HAL_USB_USART_Receive_Data>
}
   d55c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55c4:	bd08      	pop	{r3, pc}

000d55c6 <_ZN9USBSerial4peekEv>:
{
   d55c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d55c8:	2101      	movs	r1, #1
   d55ca:	7c00      	ldrb	r0, [r0, #16]
   d55cc:	f7ff fb78 	bl	d4cc0 <HAL_USB_USART_Receive_Data>
}
   d55d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55d4:	bd08      	pop	{r3, pc}

000d55d6 <_ZN9USBSerial17availableForWriteEv>:
{
   d55d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d55d8:	7c00      	ldrb	r0, [r0, #16]
   d55da:	f7ff fb69 	bl	d4cb0 <HAL_USB_USART_Available_Data_For_Write>
}
   d55de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55e2:	bd08      	pop	{r3, pc}

000d55e4 <_ZN9USBSerial9availableEv>:
{
   d55e4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d55e6:	7c00      	ldrb	r0, [r0, #16]
   d55e8:	f7ff fb5a 	bl	d4ca0 <HAL_USB_USART_Available_Data>
}
   d55ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55f0:	bd08      	pop	{r3, pc}

000d55f2 <_ZN9USBSerial5writeEh>:
{
   d55f2:	b513      	push	{r0, r1, r4, lr}
   d55f4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55f6:	7c00      	ldrb	r0, [r0, #16]
{
   d55f8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55fa:	f7ff fb59 	bl	d4cb0 <HAL_USB_USART_Available_Data_For_Write>
   d55fe:	2800      	cmp	r0, #0
   d5600:	9901      	ldr	r1, [sp, #4]
   d5602:	dc01      	bgt.n	d5608 <_ZN9USBSerial5writeEh+0x16>
   d5604:	7c60      	ldrb	r0, [r4, #17]
   d5606:	b120      	cbz	r0, d5612 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5608:	7c20      	ldrb	r0, [r4, #16]
   d560a:	f7ff fb61 	bl	d4cd0 <HAL_USB_USART_Send_Data>
   d560e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5612:	b002      	add	sp, #8
   d5614:	bd10      	pop	{r4, pc}

000d5616 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5616:	7c00      	ldrb	r0, [r0, #16]
   d5618:	f7ff bb62 	b.w	d4ce0 <HAL_USB_USART_Flush_Data>

000d561c <_ZN9USBSerialD0Ev>:
   d561c:	b510      	push	{r4, lr}
   d561e:	2114      	movs	r1, #20
   d5620:	4604      	mov	r4, r0
   d5622:	f000 faaf 	bl	d5b84 <_ZdlPvj>
   d5626:	4620      	mov	r0, r4
   d5628:	bd10      	pop	{r4, pc}
	...

000d562c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d562c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d562e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5632:	4604      	mov	r4, r0
   d5634:	4608      	mov	r0, r1
   d5636:	2100      	movs	r1, #0
   d5638:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d563c:	4b04      	ldr	r3, [pc, #16]	; (d5650 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d563e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5640:	2301      	movs	r3, #1
  _serial = serial;
   d5642:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5644:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5646:	4611      	mov	r1, r2
   d5648:	f7ff fb22 	bl	d4c90 <HAL_USB_USART_Init>
}
   d564c:	4620      	mov	r0, r4
   d564e:	bd10      	pop	{r4, pc}
   d5650:	000d67a8 	.word	0x000d67a8

000d5654 <_Z19acquireSerialBufferv>:
{
   d5654:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5656:	2214      	movs	r2, #20
{
   d5658:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d565a:	2100      	movs	r1, #0
   d565c:	f000 ffae 	bl	d65bc <memset>
}
   d5660:	4620      	mov	r0, r4
   d5662:	bd10      	pop	{r4, pc}

000d5664 <_Z16_fetch_usbserialv>:
{
   d5664:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5666:	4c0f      	ldr	r4, [pc, #60]	; (d56a4 <_Z16_fetch_usbserialv+0x40>)
{
   d5668:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d566a:	a803      	add	r0, sp, #12
   d566c:	f7ff fff2 	bl	d5654 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5670:	7821      	ldrb	r1, [r4, #0]
   d5672:	f3bf 8f5b 	dmb	ish
   d5676:	f011 0101 	ands.w	r1, r1, #1
   d567a:	d10f      	bne.n	d569c <_Z16_fetch_usbserialv+0x38>
   d567c:	4620      	mov	r0, r4
   d567e:	9101      	str	r1, [sp, #4]
   d5680:	f7fe fd0f 	bl	d40a2 <__cxa_guard_acquire>
   d5684:	9901      	ldr	r1, [sp, #4]
   d5686:	b148      	cbz	r0, d569c <_Z16_fetch_usbserialv+0x38>
   d5688:	aa03      	add	r2, sp, #12
   d568a:	4807      	ldr	r0, [pc, #28]	; (d56a8 <_Z16_fetch_usbserialv+0x44>)
   d568c:	f7ff ffce 	bl	d562c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5690:	4620      	mov	r0, r4
   d5692:	f7fe fd0b 	bl	d40ac <__cxa_guard_release>
   d5696:	4805      	ldr	r0, [pc, #20]	; (d56ac <_Z16_fetch_usbserialv+0x48>)
   d5698:	f000 ff7c 	bl	d6594 <atexit>
	return _usbserial;
}
   d569c:	4802      	ldr	r0, [pc, #8]	; (d56a8 <_Z16_fetch_usbserialv+0x44>)
   d569e:	b008      	add	sp, #32
   d56a0:	bd10      	pop	{r4, pc}
   d56a2:	bf00      	nop
   d56a4:	2003e6e8 	.word	0x2003e6e8
   d56a8:	2003e6ec 	.word	0x2003e6ec
   d56ac:	000d55b3 	.word	0x000d55b3

000d56b0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d56b0:	f7ff ba16 	b.w	d4ae0 <HAL_Interrupts_Disable_All>

000d56b4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d56b4:	f7ff ba0c 	b.w	d4ad0 <HAL_Interrupts_Enable_All>

000d56b8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d56b8:	4770      	bx	lr

000d56ba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56ba:	7441      	strb	r1, [r0, #17]
}
   d56bc:	4770      	bx	lr

000d56be <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d56be:	4770      	bx	lr

000d56c0 <_ZN11USARTSerial17availableForWriteEv>:
{
   d56c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d56c2:	7c00      	ldrb	r0, [r0, #16]
   d56c4:	f7ff fa94 	bl	d4bf0 <hal_usart_available_data_for_write>
}
   d56c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56cc:	bd08      	pop	{r3, pc}

000d56ce <_ZN11USARTSerial9availableEv>:
{
   d56ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d56d0:	7c00      	ldrb	r0, [r0, #16]
   d56d2:	f7ff fa65 	bl	d4ba0 <hal_usart_available>
}
   d56d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56da:	bd08      	pop	{r3, pc}

000d56dc <_ZN11USARTSerial4peekEv>:
{
   d56dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d56de:	7c00      	ldrb	r0, [r0, #16]
   d56e0:	f7ff fa6e 	bl	d4bc0 <hal_usart_peek>
}
   d56e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56e8:	bd08      	pop	{r3, pc}

000d56ea <_ZN11USARTSerial4readEv>:
{
   d56ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7ff fa5f 	bl	d4bb0 <hal_usart_read>
}
   d56f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56f6:	bd08      	pop	{r3, pc}

000d56f8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d56f8:	7c00      	ldrb	r0, [r0, #16]
   d56fa:	f7ff ba69 	b.w	d4bd0 <hal_usart_flush>

000d56fe <_ZN11USARTSerial5writeEh>:
{
   d56fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5700:	7c45      	ldrb	r5, [r0, #17]
{
   d5702:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5704:	b12d      	cbz	r5, d5712 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5706:	7c20      	ldrb	r0, [r4, #16]
}
   d5708:	b003      	add	sp, #12
   d570a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d570e:	f7ff ba3f 	b.w	d4b90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5712:	7c00      	ldrb	r0, [r0, #16]
   d5714:	9101      	str	r1, [sp, #4]
   d5716:	f7ff fa6b 	bl	d4bf0 <hal_usart_available_data_for_write>
   d571a:	2800      	cmp	r0, #0
   d571c:	9901      	ldr	r1, [sp, #4]
   d571e:	dcf2      	bgt.n	d5706 <_ZN11USARTSerial5writeEh+0x8>
}
   d5720:	4628      	mov	r0, r5
   d5722:	b003      	add	sp, #12
   d5724:	bd30      	pop	{r4, r5, pc}

000d5726 <_ZN11USARTSerialD0Ev>:
   d5726:	b510      	push	{r4, lr}
   d5728:	2114      	movs	r1, #20
   d572a:	4604      	mov	r4, r0
   d572c:	f000 fa2a 	bl	d5b84 <_ZdlPvj>
   d5730:	4620      	mov	r0, r4
   d5732:	bd10      	pop	{r4, pc}

000d5734 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5734:	b510      	push	{r4, lr}
   d5736:	f04f 0c00 	mov.w	ip, #0
   d573a:	4604      	mov	r4, r0
   d573c:	4608      	mov	r0, r1
   d573e:	4611      	mov	r1, r2
   d5740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5744:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5748:	4a04      	ldr	r2, [pc, #16]	; (d575c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d574a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d574c:	2201      	movs	r2, #1
  _serial = serial;
   d574e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5750:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5752:	461a      	mov	r2, r3
   d5754:	f7ff fa14 	bl	d4b80 <hal_usart_init>
}
   d5758:	4620      	mov	r0, r4
   d575a:	bd10      	pop	{r4, pc}
   d575c:	000d67d8 	.word	0x000d67d8

000d5760 <_Z22__fetch_global_Serial1v>:
{
   d5760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   d5762:	4c1a      	ldr	r4, [pc, #104]	; (d57cc <_Z22__fetch_global_Serial1v+0x6c>)
   d5764:	6826      	ldr	r6, [r4, #0]
   d5766:	b94e      	cbnz	r6, d577c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5768:	2084      	movs	r0, #132	; 0x84
   d576a:	f7fe fc94 	bl	d4096 <_Znwj>
   d576e:	4605      	mov	r5, r0
   d5770:	b118      	cbz	r0, d577a <_Z22__fetch_global_Serial1v+0x1a>
   d5772:	2284      	movs	r2, #132	; 0x84
   d5774:	4631      	mov	r1, r6
   d5776:	f000 ff21 	bl	d65bc <memset>
   d577a:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   d577c:	4d14      	ldr	r5, [pc, #80]	; (d57d0 <_Z22__fetch_global_Serial1v+0x70>)
   d577e:	682f      	ldr	r7, [r5, #0]
   d5780:	b94f      	cbnz	r7, d5796 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d5782:	2084      	movs	r0, #132	; 0x84
   d5784:	f7fe fc87 	bl	d4096 <_Znwj>
   d5788:	4606      	mov	r6, r0
   d578a:	b118      	cbz	r0, d5794 <_Z22__fetch_global_Serial1v+0x34>
   d578c:	2284      	movs	r2, #132	; 0x84
   d578e:	4639      	mov	r1, r7
   d5790:	f000 ff14 	bl	d65bc <memset>
   d5794:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5796:	4e0f      	ldr	r6, [pc, #60]	; (d57d4 <_Z22__fetch_global_Serial1v+0x74>)
   d5798:	7831      	ldrb	r1, [r6, #0]
   d579a:	f3bf 8f5b 	dmb	ish
   d579e:	f011 0101 	ands.w	r1, r1, #1
   d57a2:	d110      	bne.n	d57c6 <_Z22__fetch_global_Serial1v+0x66>
   d57a4:	4630      	mov	r0, r6
   d57a6:	9101      	str	r1, [sp, #4]
   d57a8:	f7fe fc7b 	bl	d40a2 <__cxa_guard_acquire>
   d57ac:	9901      	ldr	r1, [sp, #4]
   d57ae:	b150      	cbz	r0, d57c6 <_Z22__fetch_global_Serial1v+0x66>
   d57b0:	682b      	ldr	r3, [r5, #0]
   d57b2:	6822      	ldr	r2, [r4, #0]
   d57b4:	4808      	ldr	r0, [pc, #32]	; (d57d8 <_Z22__fetch_global_Serial1v+0x78>)
   d57b6:	f7ff ffbd 	bl	d5734 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d57ba:	4630      	mov	r0, r6
   d57bc:	f7fe fc76 	bl	d40ac <__cxa_guard_release>
   d57c0:	4806      	ldr	r0, [pc, #24]	; (d57dc <_Z22__fetch_global_Serial1v+0x7c>)
   d57c2:	f000 fee7 	bl	d6594 <atexit>
#endif
	return serial1;
}
   d57c6:	4804      	ldr	r0, [pc, #16]	; (d57d8 <_Z22__fetch_global_Serial1v+0x78>)
   d57c8:	b003      	add	sp, #12
   d57ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57cc:	2003e704 	.word	0x2003e704
   d57d0:	2003e708 	.word	0x2003e708
   d57d4:	2003e700 	.word	0x2003e700
   d57d8:	2003e70c 	.word	0x2003e70c
   d57dc:	000d56bf 	.word	0x000d56bf

000d57e0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d57e0:	4770      	bx	lr

000d57e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d57e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57e4:	4606      	mov	r6, r0
   d57e6:	4615      	mov	r5, r2
   d57e8:	460c      	mov	r4, r1
   d57ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57ec:	42bc      	cmp	r4, r7
   d57ee:	d006      	beq.n	d57fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d57f0:	6833      	ldr	r3, [r6, #0]
   d57f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57f6:	689b      	ldr	r3, [r3, #8]
   d57f8:	4630      	mov	r0, r6
   d57fa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d57fc:	e7f6      	b.n	d57ec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d57fe:	4628      	mov	r0, r5
   d5800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5802 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	2200      	movs	r2, #0
   d5806:	f7ff b9fb 	b.w	d4c00 <hal_i2c_write>

000d580a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d580a:	7c00      	ldrb	r0, [r0, #16]
   d580c:	2100      	movs	r1, #0
   d580e:	f7ff b9ff 	b.w	d4c10 <hal_i2c_available>

000d5812 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5812:	7c00      	ldrb	r0, [r0, #16]
   d5814:	2100      	movs	r1, #0
   d5816:	f7ff ba03 	b.w	d4c20 <hal_i2c_read>

000d581a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d581a:	7c00      	ldrb	r0, [r0, #16]
   d581c:	2100      	movs	r1, #0
   d581e:	f7ff ba07 	b.w	d4c30 <hal_i2c_peek>

000d5822 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5822:	7c00      	ldrb	r0, [r0, #16]
   d5824:	2100      	movs	r1, #0
   d5826:	f7ff ba0b 	b.w	d4c40 <hal_i2c_flush>

000d582a <_ZN7TwoWireD0Ev>:
   d582a:	b510      	push	{r4, lr}
   d582c:	2114      	movs	r1, #20
   d582e:	4604      	mov	r4, r0
   d5830:	f000 f9a8 	bl	d5b84 <_ZdlPvj>
   d5834:	4620      	mov	r0, r4
   d5836:	bd10      	pop	{r4, pc}

000d5838 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5838:	b510      	push	{r4, lr}
   d583a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d583e:	4604      	mov	r4, r0
   d5840:	4608      	mov	r0, r1
   d5842:	2100      	movs	r1, #0
   d5844:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5848:	4b03      	ldr	r3, [pc, #12]	; (d5858 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d584a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d584c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d584e:	4611      	mov	r1, r2
   d5850:	f7ff fa06 	bl	d4c60 <hal_i2c_init>
}
   d5854:	4620      	mov	r0, r4
   d5856:	bd10      	pop	{r4, pc}
   d5858:	000d6808 	.word	0x000d6808

000d585c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d585c:	2200      	movs	r2, #0
   d585e:	6840      	ldr	r0, [r0, #4]
   d5860:	4611      	mov	r1, r2
   d5862:	f7ff ba99 	b.w	d4d98 <network_ready>

000d5866 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5866:	2200      	movs	r2, #0
   d5868:	6840      	ldr	r0, [r0, #4]
   d586a:	4611      	mov	r1, r2
   d586c:	f7ff bab4 	b.w	d4dd8 <network_listening>

000d5870 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5870:	2200      	movs	r2, #0
   d5872:	6840      	ldr	r0, [r0, #4]
   d5874:	4611      	mov	r1, r2
   d5876:	f7ff babf 	b.w	d4df8 <network_get_listen_timeout>

000d587a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d587a:	6840      	ldr	r0, [r0, #4]
   d587c:	2200      	movs	r2, #0
   d587e:	f7ff bab3 	b.w	d4de8 <network_set_listen_timeout>

000d5882 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5882:	6840      	ldr	r0, [r0, #4]
   d5884:	2200      	movs	r2, #0
   d5886:	f081 0101 	eor.w	r1, r1, #1
   d588a:	f7ff ba9d 	b.w	d4dc8 <network_listen>

000d588e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d588e:	2300      	movs	r3, #0
   d5890:	6840      	ldr	r0, [r0, #4]
   d5892:	461a      	mov	r2, r3
   d5894:	4619      	mov	r1, r3
   d5896:	f7ff ba8f 	b.w	d4db8 <network_off>

000d589a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d589a:	2300      	movs	r3, #0
   d589c:	6840      	ldr	r0, [r0, #4]
   d589e:	461a      	mov	r2, r3
   d58a0:	4619      	mov	r1, r3
   d58a2:	f7ff ba81 	b.w	d4da8 <network_on>

000d58a6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d58a6:	2200      	movs	r2, #0
   d58a8:	6840      	ldr	r0, [r0, #4]
   d58aa:	4611      	mov	r1, r2
   d58ac:	f7ff ba64 	b.w	d4d78 <network_connecting>

000d58b0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58b0:	6840      	ldr	r0, [r0, #4]
   d58b2:	2200      	movs	r2, #0
   d58b4:	2102      	movs	r1, #2
   d58b6:	f7ff ba67 	b.w	d4d88 <network_disconnect>

000d58ba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d58ba:	2300      	movs	r3, #0
   d58bc:	6840      	ldr	r0, [r0, #4]
   d58be:	461a      	mov	r2, r3
   d58c0:	f7ff ba52 	b.w	d4d68 <network_connect>

000d58c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58c4:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58c6:	2204      	movs	r2, #4
   d58c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58ca:	4a02      	ldr	r2, [pc, #8]	; (d58d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58cc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d58ce:	4770      	bx	lr
   d58d0:	2003e720 	.word	0x2003e720
   d58d4:	000d6830 	.word	0x000d6830

000d58d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58d8:	2300      	movs	r3, #0
   d58da:	6840      	ldr	r0, [r0, #4]
   d58dc:	461a      	mov	r2, r3
   d58de:	f7ff ba43 	b.w	d4d68 <network_connect>

000d58e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58e2:	6840      	ldr	r0, [r0, #4]
   d58e4:	2200      	movs	r2, #0
   d58e6:	2102      	movs	r1, #2
   d58e8:	f7ff ba4e 	b.w	d4d88 <network_disconnect>

000d58ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d58ec:	2200      	movs	r2, #0
   d58ee:	6840      	ldr	r0, [r0, #4]
   d58f0:	4611      	mov	r1, r2
   d58f2:	f7ff ba41 	b.w	d4d78 <network_connecting>

000d58f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58f6:	2200      	movs	r2, #0
   d58f8:	6840      	ldr	r0, [r0, #4]
   d58fa:	4611      	mov	r1, r2
   d58fc:	f7ff ba4c 	b.w	d4d98 <network_ready>

000d5900 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5900:	2300      	movs	r3, #0
   d5902:	6840      	ldr	r0, [r0, #4]
   d5904:	461a      	mov	r2, r3
   d5906:	4619      	mov	r1, r3
   d5908:	f7ff ba4e 	b.w	d4da8 <network_on>

000d590c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d590c:	2300      	movs	r3, #0
   d590e:	6840      	ldr	r0, [r0, #4]
   d5910:	461a      	mov	r2, r3
   d5912:	4619      	mov	r1, r3
   d5914:	f7ff ba50 	b.w	d4db8 <network_off>

000d5918 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	2100      	movs	r1, #0
   d591c:	f7ff ba74 	b.w	d4e08 <network_is_on>

000d5920 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	2100      	movs	r1, #0
   d5924:	f7ff ba78 	b.w	d4e18 <network_is_off>

000d5928 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5928:	6840      	ldr	r0, [r0, #4]
   d592a:	2200      	movs	r2, #0
   d592c:	f081 0101 	eor.w	r1, r1, #1
   d5930:	f7ff ba4a 	b.w	d4dc8 <network_listen>

000d5934 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	2200      	movs	r2, #0
   d5938:	f7ff ba56 	b.w	d4de8 <network_set_listen_timeout>

000d593c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d593c:	2200      	movs	r2, #0
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	4611      	mov	r1, r2
   d5942:	f7ff ba59 	b.w	d4df8 <network_get_listen_timeout>

000d5946 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5946:	2200      	movs	r2, #0
   d5948:	6840      	ldr	r0, [r0, #4]
   d594a:	4611      	mov	r1, r2
   d594c:	f7ff ba44 	b.w	d4dd8 <network_listening>

000d5950 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5954:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5956:	b095      	sub	sp, #84	; 0x54
   d5958:	4616      	mov	r6, r2
   d595a:	460d      	mov	r5, r1
   d595c:	4607      	mov	r7, r0
    IPAddress addr;
   d595e:	f7ff fdef 	bl	d5540 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5962:	4621      	mov	r1, r4
   d5964:	2218      	movs	r2, #24
   d5966:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5968:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d596a:	f000 fe27 	bl	d65bc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d596e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5970:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5974:	4621      	mov	r1, r4
   d5976:	466b      	mov	r3, sp
   d5978:	aa0c      	add	r2, sp, #48	; 0x30
   d597a:	4630      	mov	r0, r6
   d597c:	f7ff f880 	bl	d4a80 <netdb_getaddrinfo>
    if (!r) {
   d5980:	4604      	mov	r4, r0
   d5982:	2800      	cmp	r0, #0
   d5984:	d146      	bne.n	d5a14 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5986:	4602      	mov	r2, r0
   d5988:	2101      	movs	r1, #1
   d598a:	6868      	ldr	r0, [r5, #4]
   d598c:	f7ff fa04 	bl	d4d98 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5990:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5992:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5994:	4622      	mov	r2, r4
   d5996:	6868      	ldr	r0, [r5, #4]
   d5998:	f7ff f9fe 	bl	d4d98 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d599c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d599e:	4681      	mov	r9, r0
        bool ok = false;
   d59a0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59a2:	2e00      	cmp	r6, #0
   d59a4:	d036      	beq.n	d5a14 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d59a6:	2900      	cmp	r1, #0
   d59a8:	d134      	bne.n	d5a14 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59aa:	6873      	ldr	r3, [r6, #4]
   d59ac:	2b02      	cmp	r3, #2
   d59ae:	d003      	beq.n	d59b8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d59b0:	2b0a      	cmp	r3, #10
   d59b2:	d00b      	beq.n	d59cc <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59b4:	69f6      	ldr	r6, [r6, #28]
   d59b6:	e7f4      	b.n	d59a2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d59b8:	f1b8 0f00 	cmp.w	r8, #0
   d59bc:	d004      	beq.n	d59c8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59be:	6971      	ldr	r1, [r6, #20]
   d59c0:	4638      	mov	r0, r7
   d59c2:	3104      	adds	r1, #4
   d59c4:	f7ff fde9 	bl	d559a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d59c8:	4641      	mov	r1, r8
   d59ca:	e7f3      	b.n	d59b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d59cc:	f1b9 0f00 	cmp.w	r9, #0
   d59d0:	d101      	bne.n	d59d6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d59d2:	4649      	mov	r1, r9
   d59d4:	e7ee      	b.n	d59b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d59d6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d59d8:	2210      	movs	r2, #16
   d59da:	a801      	add	r0, sp, #4
   d59dc:	f000 fdee 	bl	d65bc <memset>
                    a.v = 6;
   d59e0:	2306      	movs	r3, #6
   d59e2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d59e6:	ad01      	add	r5, sp, #4
   d59e8:	f104 0308 	add.w	r3, r4, #8
   d59ec:	3418      	adds	r4, #24
   d59ee:	6818      	ldr	r0, [r3, #0]
   d59f0:	6859      	ldr	r1, [r3, #4]
   d59f2:	462a      	mov	r2, r5
   d59f4:	c203      	stmia	r2!, {r0, r1}
   d59f6:	3308      	adds	r3, #8
   d59f8:	42a3      	cmp	r3, r4
   d59fa:	4615      	mov	r5, r2
   d59fc:	d1f7      	bne.n	d59ee <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d59fe:	a901      	add	r1, sp, #4
   d5a00:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5a02:	ad07      	add	r5, sp, #28
   d5a04:	f7ff fdaa 	bl	d555c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a0a:	1d3c      	adds	r4, r7, #4
   d5a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a0e:	682b      	ldr	r3, [r5, #0]
   d5a10:	7023      	strb	r3, [r4, #0]
   d5a12:	e7de      	b.n	d59d2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a14:	9800      	ldr	r0, [sp, #0]
   d5a16:	f7ff f82b 	bl	d4a70 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a1a:	4638      	mov	r0, r7
   d5a1c:	b015      	add	sp, #84	; 0x54
   d5a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5a24 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a24:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a26:	4a03      	ldr	r2, [pc, #12]	; (d5a34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a28:	601a      	str	r2, [r3, #0]
   d5a2a:	2200      	movs	r2, #0
   d5a2c:	605a      	str	r2, [r3, #4]

} // spark
   d5a2e:	4770      	bx	lr
   d5a30:	2003e728 	.word	0x2003e728
   d5a34:	000d686c 	.word	0x000d686c

000d5a38 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5a38:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5a3a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5a3c:	d902      	bls.n	d5a44 <pinAvailable+0xc>
    return false;
   d5a3e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5a40:	b002      	add	sp, #8
   d5a42:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5a44:	f1a0 030b 	sub.w	r3, r0, #11
   d5a48:	2b02      	cmp	r3, #2
   d5a4a:	d81a      	bhi.n	d5a82 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5a4c:	4c17      	ldr	r4, [pc, #92]	; (d5aac <pinAvailable+0x74>)
   d5a4e:	7821      	ldrb	r1, [r4, #0]
   d5a50:	f3bf 8f5b 	dmb	ish
   d5a54:	f011 0101 	ands.w	r1, r1, #1
   d5a58:	d10b      	bne.n	d5a72 <pinAvailable+0x3a>
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	9101      	str	r1, [sp, #4]
   d5a5e:	f7fe fb20 	bl	d40a2 <__cxa_guard_acquire>
   d5a62:	9901      	ldr	r1, [sp, #4]
   d5a64:	b128      	cbz	r0, d5a72 <pinAvailable+0x3a>
   d5a66:	4812      	ldr	r0, [pc, #72]	; (d5ab0 <pinAvailable+0x78>)
   d5a68:	f7ff fa5c 	bl	d4f24 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5a6c:	4620      	mov	r0, r4
   d5a6e:	f7fe fb1d 	bl	d40ac <__cxa_guard_release>
   d5a72:	4b0f      	ldr	r3, [pc, #60]	; (d5ab0 <pinAvailable+0x78>)
   d5a74:	7818      	ldrb	r0, [r3, #0]
   d5a76:	f7ff f903 	bl	d4c80 <hal_spi_is_enabled>
   d5a7a:	2800      	cmp	r0, #0
   d5a7c:	d1df      	bne.n	d5a3e <pinAvailable+0x6>
  return true; // 'pin' is available
   d5a7e:	2001      	movs	r0, #1
   d5a80:	e7de      	b.n	d5a40 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5a82:	2801      	cmp	r0, #1
   d5a84:	d809      	bhi.n	d5a9a <pinAvailable+0x62>
   d5a86:	f000 f859 	bl	d5b3c <_Z19__fetch_global_Wirev>
   d5a8a:	2100      	movs	r1, #0
   d5a8c:	7c00      	ldrb	r0, [r0, #16]
   d5a8e:	f7ff f8df 	bl	d4c50 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5a92:	f080 0001 	eor.w	r0, r0, #1
   d5a96:	b2c0      	uxtb	r0, r0
   d5a98:	e7d2      	b.n	d5a40 <pinAvailable+0x8>
   d5a9a:	3809      	subs	r0, #9
   d5a9c:	2801      	cmp	r0, #1
   d5a9e:	d8ee      	bhi.n	d5a7e <pinAvailable+0x46>
   d5aa0:	f7ff fe5e 	bl	d5760 <_Z22__fetch_global_Serial1v>
   d5aa4:	7c00      	ldrb	r0, [r0, #16]
   d5aa6:	f7ff f89b 	bl	d4be0 <hal_usart_is_enabled>
   d5aaa:	e7f2      	b.n	d5a92 <pinAvailable+0x5a>
   d5aac:	2003e730 	.word	0x2003e730
   d5ab0:	2003e734 	.word	0x2003e734

000d5ab4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ab4:	2823      	cmp	r0, #35	; 0x23
{
   d5ab6:	b538      	push	{r3, r4, r5, lr}
   d5ab8:	4604      	mov	r4, r0
   d5aba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5abc:	d80a      	bhi.n	d5ad4 <pinMode+0x20>
   d5abe:	29ff      	cmp	r1, #255	; 0xff
   d5ac0:	d008      	beq.n	d5ad4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5ac2:	f7ff ffb9 	bl	d5a38 <pinAvailable>
   d5ac6:	b128      	cbz	r0, d5ad4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5ac8:	4629      	mov	r1, r5
   d5aca:	4620      	mov	r0, r4
}
   d5acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5ad0:	f7fe bfe6 	b.w	d4aa0 <HAL_Pin_Mode>
}
   d5ad4:	bd38      	pop	{r3, r4, r5, pc}

000d5ad6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5ad6:	b538      	push	{r3, r4, r5, lr}
   d5ad8:	4604      	mov	r4, r0
   d5ada:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5adc:	f7fe ffe8 	bl	d4ab0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ae0:	28ff      	cmp	r0, #255	; 0xff
   d5ae2:	d010      	beq.n	d5b06 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5ae4:	2806      	cmp	r0, #6
   d5ae6:	d804      	bhi.n	d5af2 <digitalWrite+0x1c>
   d5ae8:	234d      	movs	r3, #77	; 0x4d
   d5aea:	fa23 f000 	lsr.w	r0, r3, r0
   d5aee:	07c3      	lsls	r3, r0, #31
   d5af0:	d409      	bmi.n	d5b06 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5af2:	4620      	mov	r0, r4
   d5af4:	f7ff ffa0 	bl	d5a38 <pinAvailable>
   d5af8:	b128      	cbz	r0, d5b06 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5afa:	4629      	mov	r1, r5
   d5afc:	4620      	mov	r0, r4
}
   d5afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5b02:	f7fe bfdd 	b.w	d4ac0 <HAL_GPIO_Write>
}
   d5b06:	bd38      	pop	{r3, r4, r5, pc}

000d5b08 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b08:	4770      	bx	lr
	...

000d5b0c <_Z17acquireWireBufferv>:
{
   d5b0c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5b0e:	2300      	movs	r3, #0
   d5b10:	2520      	movs	r5, #32
   d5b12:	8043      	strh	r3, [r0, #2]
   d5b14:	2314      	movs	r3, #20
{
   d5b16:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5b18:	8003      	strh	r3, [r0, #0]
   d5b1a:	6085      	str	r5, [r0, #8]
   d5b1c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b1e:	4906      	ldr	r1, [pc, #24]	; (d5b38 <_Z17acquireWireBufferv+0x2c>)
   d5b20:	4628      	mov	r0, r5
   d5b22:	f000 f831 	bl	d5b88 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b26:	4904      	ldr	r1, [pc, #16]	; (d5b38 <_Z17acquireWireBufferv+0x2c>)
	};
   d5b28:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b2a:	4628      	mov	r0, r5
   d5b2c:	f000 f82c 	bl	d5b88 <_ZnajRKSt9nothrow_t>
	};
   d5b30:	60e0      	str	r0, [r4, #12]
}
   d5b32:	4620      	mov	r0, r4
   d5b34:	bd38      	pop	{r3, r4, r5, pc}
   d5b36:	bf00      	nop
   d5b38:	000d68a0 	.word	0x000d68a0

000d5b3c <_Z19__fetch_global_Wirev>:
{
   d5b3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b3e:	4d0e      	ldr	r5, [pc, #56]	; (d5b78 <_Z19__fetch_global_Wirev+0x3c>)
   d5b40:	7829      	ldrb	r1, [r5, #0]
   d5b42:	f3bf 8f5b 	dmb	ish
   d5b46:	f011 0401 	ands.w	r4, r1, #1
{
   d5b4a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b4c:	d111      	bne.n	d5b72 <_Z19__fetch_global_Wirev+0x36>
   d5b4e:	4628      	mov	r0, r5
   d5b50:	f7fe faa7 	bl	d40a2 <__cxa_guard_acquire>
   d5b54:	b168      	cbz	r0, d5b72 <_Z19__fetch_global_Wirev+0x36>
   d5b56:	a801      	add	r0, sp, #4
   d5b58:	f7ff ffd8 	bl	d5b0c <_Z17acquireWireBufferv>
   d5b5c:	aa01      	add	r2, sp, #4
   d5b5e:	4621      	mov	r1, r4
   d5b60:	4806      	ldr	r0, [pc, #24]	; (d5b7c <_Z19__fetch_global_Wirev+0x40>)
   d5b62:	f7ff fe69 	bl	d5838 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5b66:	4628      	mov	r0, r5
   d5b68:	f7fe faa0 	bl	d40ac <__cxa_guard_release>
   d5b6c:	4804      	ldr	r0, [pc, #16]	; (d5b80 <_Z19__fetch_global_Wirev+0x44>)
   d5b6e:	f000 fd11 	bl	d6594 <atexit>
	return wire;
}
   d5b72:	4802      	ldr	r0, [pc, #8]	; (d5b7c <_Z19__fetch_global_Wirev+0x40>)
   d5b74:	b007      	add	sp, #28
   d5b76:	bd30      	pop	{r4, r5, pc}
   d5b78:	2003e740 	.word	0x2003e740
   d5b7c:	2003e744 	.word	0x2003e744
   d5b80:	000d5b09 	.word	0x000d5b09

000d5b84 <_ZdlPvj>:
   d5b84:	f7fe ba8b 	b.w	d409e <_ZdlPv>

000d5b88 <_ZnajRKSt9nothrow_t>:
   d5b88:	f7fe ba87 	b.w	d409a <_Znaj>

000d5b8c <__aeabi_drsub>:
   d5b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5b90:	e002      	b.n	d5b98 <__adddf3>
   d5b92:	bf00      	nop

000d5b94 <__aeabi_dsub>:
   d5b94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5b98 <__adddf3>:
   d5b98:	b530      	push	{r4, r5, lr}
   d5b9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5b9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ba2:	ea94 0f05 	teq	r4, r5
   d5ba6:	bf08      	it	eq
   d5ba8:	ea90 0f02 	teqeq	r0, r2
   d5bac:	bf1f      	itttt	ne
   d5bae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5bb2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5bb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5bba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5bbe:	f000 80e2 	beq.w	d5d86 <__adddf3+0x1ee>
   d5bc2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5bc6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5bca:	bfb8      	it	lt
   d5bcc:	426d      	neglt	r5, r5
   d5bce:	dd0c      	ble.n	d5bea <__adddf3+0x52>
   d5bd0:	442c      	add	r4, r5
   d5bd2:	ea80 0202 	eor.w	r2, r0, r2
   d5bd6:	ea81 0303 	eor.w	r3, r1, r3
   d5bda:	ea82 0000 	eor.w	r0, r2, r0
   d5bde:	ea83 0101 	eor.w	r1, r3, r1
   d5be2:	ea80 0202 	eor.w	r2, r0, r2
   d5be6:	ea81 0303 	eor.w	r3, r1, r3
   d5bea:	2d36      	cmp	r5, #54	; 0x36
   d5bec:	bf88      	it	hi
   d5bee:	bd30      	pophi	{r4, r5, pc}
   d5bf0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5bf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5bf8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5bfc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c00:	d002      	beq.n	d5c08 <__adddf3+0x70>
   d5c02:	4240      	negs	r0, r0
   d5c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5c0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5c14:	d002      	beq.n	d5c1c <__adddf3+0x84>
   d5c16:	4252      	negs	r2, r2
   d5c18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5c1c:	ea94 0f05 	teq	r4, r5
   d5c20:	f000 80a7 	beq.w	d5d72 <__adddf3+0x1da>
   d5c24:	f1a4 0401 	sub.w	r4, r4, #1
   d5c28:	f1d5 0e20 	rsbs	lr, r5, #32
   d5c2c:	db0d      	blt.n	d5c4a <__adddf3+0xb2>
   d5c2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5c32:	fa22 f205 	lsr.w	r2, r2, r5
   d5c36:	1880      	adds	r0, r0, r2
   d5c38:	f141 0100 	adc.w	r1, r1, #0
   d5c3c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5c40:	1880      	adds	r0, r0, r2
   d5c42:	fa43 f305 	asr.w	r3, r3, r5
   d5c46:	4159      	adcs	r1, r3
   d5c48:	e00e      	b.n	d5c68 <__adddf3+0xd0>
   d5c4a:	f1a5 0520 	sub.w	r5, r5, #32
   d5c4e:	f10e 0e20 	add.w	lr, lr, #32
   d5c52:	2a01      	cmp	r2, #1
   d5c54:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5c58:	bf28      	it	cs
   d5c5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5c5e:	fa43 f305 	asr.w	r3, r3, r5
   d5c62:	18c0      	adds	r0, r0, r3
   d5c64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c6c:	d507      	bpl.n	d5c7e <__adddf3+0xe6>
   d5c6e:	f04f 0e00 	mov.w	lr, #0
   d5c72:	f1dc 0c00 	rsbs	ip, ip, #0
   d5c76:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c7a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5c7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5c82:	d31b      	bcc.n	d5cbc <__adddf3+0x124>
   d5c84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5c88:	d30c      	bcc.n	d5ca4 <__adddf3+0x10c>
   d5c8a:	0849      	lsrs	r1, r1, #1
   d5c8c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5c90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5c94:	f104 0401 	add.w	r4, r4, #1
   d5c98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5c9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ca0:	f080 809a 	bcs.w	d5dd8 <__adddf3+0x240>
   d5ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ca8:	bf08      	it	eq
   d5caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5cae:	f150 0000 	adcs.w	r0, r0, #0
   d5cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5cb6:	ea41 0105 	orr.w	r1, r1, r5
   d5cba:	bd30      	pop	{r4, r5, pc}
   d5cbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5cc0:	4140      	adcs	r0, r0
   d5cc2:	eb41 0101 	adc.w	r1, r1, r1
   d5cc6:	3c01      	subs	r4, #1
   d5cc8:	bf28      	it	cs
   d5cca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5cce:	d2e9      	bcs.n	d5ca4 <__adddf3+0x10c>
   d5cd0:	f091 0f00 	teq	r1, #0
   d5cd4:	bf04      	itt	eq
   d5cd6:	4601      	moveq	r1, r0
   d5cd8:	2000      	moveq	r0, #0
   d5cda:	fab1 f381 	clz	r3, r1
   d5cde:	bf08      	it	eq
   d5ce0:	3320      	addeq	r3, #32
   d5ce2:	f1a3 030b 	sub.w	r3, r3, #11
   d5ce6:	f1b3 0220 	subs.w	r2, r3, #32
   d5cea:	da0c      	bge.n	d5d06 <__adddf3+0x16e>
   d5cec:	320c      	adds	r2, #12
   d5cee:	dd08      	ble.n	d5d02 <__adddf3+0x16a>
   d5cf0:	f102 0c14 	add.w	ip, r2, #20
   d5cf4:	f1c2 020c 	rsb	r2, r2, #12
   d5cf8:	fa01 f00c 	lsl.w	r0, r1, ip
   d5cfc:	fa21 f102 	lsr.w	r1, r1, r2
   d5d00:	e00c      	b.n	d5d1c <__adddf3+0x184>
   d5d02:	f102 0214 	add.w	r2, r2, #20
   d5d06:	bfd8      	it	le
   d5d08:	f1c2 0c20 	rsble	ip, r2, #32
   d5d0c:	fa01 f102 	lsl.w	r1, r1, r2
   d5d10:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5d14:	bfdc      	itt	le
   d5d16:	ea41 010c 	orrle.w	r1, r1, ip
   d5d1a:	4090      	lslle	r0, r2
   d5d1c:	1ae4      	subs	r4, r4, r3
   d5d1e:	bfa2      	ittt	ge
   d5d20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5d24:	4329      	orrge	r1, r5
   d5d26:	bd30      	popge	{r4, r5, pc}
   d5d28:	ea6f 0404 	mvn.w	r4, r4
   d5d2c:	3c1f      	subs	r4, #31
   d5d2e:	da1c      	bge.n	d5d6a <__adddf3+0x1d2>
   d5d30:	340c      	adds	r4, #12
   d5d32:	dc0e      	bgt.n	d5d52 <__adddf3+0x1ba>
   d5d34:	f104 0414 	add.w	r4, r4, #20
   d5d38:	f1c4 0220 	rsb	r2, r4, #32
   d5d3c:	fa20 f004 	lsr.w	r0, r0, r4
   d5d40:	fa01 f302 	lsl.w	r3, r1, r2
   d5d44:	ea40 0003 	orr.w	r0, r0, r3
   d5d48:	fa21 f304 	lsr.w	r3, r1, r4
   d5d4c:	ea45 0103 	orr.w	r1, r5, r3
   d5d50:	bd30      	pop	{r4, r5, pc}
   d5d52:	f1c4 040c 	rsb	r4, r4, #12
   d5d56:	f1c4 0220 	rsb	r2, r4, #32
   d5d5a:	fa20 f002 	lsr.w	r0, r0, r2
   d5d5e:	fa01 f304 	lsl.w	r3, r1, r4
   d5d62:	ea40 0003 	orr.w	r0, r0, r3
   d5d66:	4629      	mov	r1, r5
   d5d68:	bd30      	pop	{r4, r5, pc}
   d5d6a:	fa21 f004 	lsr.w	r0, r1, r4
   d5d6e:	4629      	mov	r1, r5
   d5d70:	bd30      	pop	{r4, r5, pc}
   d5d72:	f094 0f00 	teq	r4, #0
   d5d76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d7a:	bf06      	itte	eq
   d5d7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5d80:	3401      	addeq	r4, #1
   d5d82:	3d01      	subne	r5, #1
   d5d84:	e74e      	b.n	d5c24 <__adddf3+0x8c>
   d5d86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d8a:	bf18      	it	ne
   d5d8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d90:	d029      	beq.n	d5de6 <__adddf3+0x24e>
   d5d92:	ea94 0f05 	teq	r4, r5
   d5d96:	bf08      	it	eq
   d5d98:	ea90 0f02 	teqeq	r0, r2
   d5d9c:	d005      	beq.n	d5daa <__adddf3+0x212>
   d5d9e:	ea54 0c00 	orrs.w	ip, r4, r0
   d5da2:	bf04      	itt	eq
   d5da4:	4619      	moveq	r1, r3
   d5da6:	4610      	moveq	r0, r2
   d5da8:	bd30      	pop	{r4, r5, pc}
   d5daa:	ea91 0f03 	teq	r1, r3
   d5dae:	bf1e      	ittt	ne
   d5db0:	2100      	movne	r1, #0
   d5db2:	2000      	movne	r0, #0
   d5db4:	bd30      	popne	{r4, r5, pc}
   d5db6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5dba:	d105      	bne.n	d5dc8 <__adddf3+0x230>
   d5dbc:	0040      	lsls	r0, r0, #1
   d5dbe:	4149      	adcs	r1, r1
   d5dc0:	bf28      	it	cs
   d5dc2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5dc6:	bd30      	pop	{r4, r5, pc}
   d5dc8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5dcc:	bf3c      	itt	cc
   d5dce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5dd2:	bd30      	popcc	{r4, r5, pc}
   d5dd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5dd8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5ddc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5de0:	f04f 0000 	mov.w	r0, #0
   d5de4:	bd30      	pop	{r4, r5, pc}
   d5de6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5dea:	bf1a      	itte	ne
   d5dec:	4619      	movne	r1, r3
   d5dee:	4610      	movne	r0, r2
   d5df0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5df4:	bf1c      	itt	ne
   d5df6:	460b      	movne	r3, r1
   d5df8:	4602      	movne	r2, r0
   d5dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5dfe:	bf06      	itte	eq
   d5e00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e04:	ea91 0f03 	teqeq	r1, r3
   d5e08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5e0c:	bd30      	pop	{r4, r5, pc}
   d5e0e:	bf00      	nop

000d5e10 <__aeabi_ui2d>:
   d5e10:	f090 0f00 	teq	r0, #0
   d5e14:	bf04      	itt	eq
   d5e16:	2100      	moveq	r1, #0
   d5e18:	4770      	bxeq	lr
   d5e1a:	b530      	push	{r4, r5, lr}
   d5e1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e24:	f04f 0500 	mov.w	r5, #0
   d5e28:	f04f 0100 	mov.w	r1, #0
   d5e2c:	e750      	b.n	d5cd0 <__adddf3+0x138>
   d5e2e:	bf00      	nop

000d5e30 <__aeabi_i2d>:
   d5e30:	f090 0f00 	teq	r0, #0
   d5e34:	bf04      	itt	eq
   d5e36:	2100      	moveq	r1, #0
   d5e38:	4770      	bxeq	lr
   d5e3a:	b530      	push	{r4, r5, lr}
   d5e3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5e48:	bf48      	it	mi
   d5e4a:	4240      	negmi	r0, r0
   d5e4c:	f04f 0100 	mov.w	r1, #0
   d5e50:	e73e      	b.n	d5cd0 <__adddf3+0x138>
   d5e52:	bf00      	nop

000d5e54 <__aeabi_f2d>:
   d5e54:	0042      	lsls	r2, r0, #1
   d5e56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5e5a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5e5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5e62:	bf1f      	itttt	ne
   d5e64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5e68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5e70:	4770      	bxne	lr
   d5e72:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5e76:	bf08      	it	eq
   d5e78:	4770      	bxeq	lr
   d5e7a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5e7e:	bf04      	itt	eq
   d5e80:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5e84:	4770      	bxeq	lr
   d5e86:	b530      	push	{r4, r5, lr}
   d5e88:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5e8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e94:	e71c      	b.n	d5cd0 <__adddf3+0x138>
   d5e96:	bf00      	nop

000d5e98 <__aeabi_ul2d>:
   d5e98:	ea50 0201 	orrs.w	r2, r0, r1
   d5e9c:	bf08      	it	eq
   d5e9e:	4770      	bxeq	lr
   d5ea0:	b530      	push	{r4, r5, lr}
   d5ea2:	f04f 0500 	mov.w	r5, #0
   d5ea6:	e00a      	b.n	d5ebe <__aeabi_l2d+0x16>

000d5ea8 <__aeabi_l2d>:
   d5ea8:	ea50 0201 	orrs.w	r2, r0, r1
   d5eac:	bf08      	it	eq
   d5eae:	4770      	bxeq	lr
   d5eb0:	b530      	push	{r4, r5, lr}
   d5eb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5eb6:	d502      	bpl.n	d5ebe <__aeabi_l2d+0x16>
   d5eb8:	4240      	negs	r0, r0
   d5eba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ebe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ec2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ec6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5eca:	f43f aed8 	beq.w	d5c7e <__adddf3+0xe6>
   d5ece:	f04f 0203 	mov.w	r2, #3
   d5ed2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ed6:	bf18      	it	ne
   d5ed8:	3203      	addne	r2, #3
   d5eda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ede:	bf18      	it	ne
   d5ee0:	3203      	addne	r2, #3
   d5ee2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ee6:	f1c2 0320 	rsb	r3, r2, #32
   d5eea:	fa00 fc03 	lsl.w	ip, r0, r3
   d5eee:	fa20 f002 	lsr.w	r0, r0, r2
   d5ef2:	fa01 fe03 	lsl.w	lr, r1, r3
   d5ef6:	ea40 000e 	orr.w	r0, r0, lr
   d5efa:	fa21 f102 	lsr.w	r1, r1, r2
   d5efe:	4414      	add	r4, r2
   d5f00:	e6bd      	b.n	d5c7e <__adddf3+0xe6>
   d5f02:	bf00      	nop

000d5f04 <__aeabi_dmul>:
   d5f04:	b570      	push	{r4, r5, r6, lr}
   d5f06:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5f0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5f0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f12:	bf1d      	ittte	ne
   d5f14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5f18:	ea94 0f0c 	teqne	r4, ip
   d5f1c:	ea95 0f0c 	teqne	r5, ip
   d5f20:	f000 f8de 	bleq	d60e0 <__aeabi_dmul+0x1dc>
   d5f24:	442c      	add	r4, r5
   d5f26:	ea81 0603 	eor.w	r6, r1, r3
   d5f2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5f2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5f32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5f36:	bf18      	it	ne
   d5f38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5f3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5f44:	d038      	beq.n	d5fb8 <__aeabi_dmul+0xb4>
   d5f46:	fba0 ce02 	umull	ip, lr, r0, r2
   d5f4a:	f04f 0500 	mov.w	r5, #0
   d5f4e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5f52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5f56:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5f5a:	f04f 0600 	mov.w	r6, #0
   d5f5e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5f62:	f09c 0f00 	teq	ip, #0
   d5f66:	bf18      	it	ne
   d5f68:	f04e 0e01 	orrne.w	lr, lr, #1
   d5f6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5f70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5f78:	d204      	bcs.n	d5f84 <__aeabi_dmul+0x80>
   d5f7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5f7e:	416d      	adcs	r5, r5
   d5f80:	eb46 0606 	adc.w	r6, r6, r6
   d5f84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5f88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5f8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5f90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5f94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5f98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f9c:	bf88      	it	hi
   d5f9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5fa2:	d81e      	bhi.n	d5fe2 <__aeabi_dmul+0xde>
   d5fa4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5fa8:	bf08      	it	eq
   d5faa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5fae:	f150 0000 	adcs.w	r0, r0, #0
   d5fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fb6:	bd70      	pop	{r4, r5, r6, pc}
   d5fb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5fbc:	ea46 0101 	orr.w	r1, r6, r1
   d5fc0:	ea40 0002 	orr.w	r0, r0, r2
   d5fc4:	ea81 0103 	eor.w	r1, r1, r3
   d5fc8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5fcc:	bfc2      	ittt	gt
   d5fce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5fd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5fd6:	bd70      	popgt	{r4, r5, r6, pc}
   d5fd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fdc:	f04f 0e00 	mov.w	lr, #0
   d5fe0:	3c01      	subs	r4, #1
   d5fe2:	f300 80ab 	bgt.w	d613c <__aeabi_dmul+0x238>
   d5fe6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5fea:	bfde      	ittt	le
   d5fec:	2000      	movle	r0, #0
   d5fee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5ff2:	bd70      	pople	{r4, r5, r6, pc}
   d5ff4:	f1c4 0400 	rsb	r4, r4, #0
   d5ff8:	3c20      	subs	r4, #32
   d5ffa:	da35      	bge.n	d6068 <__aeabi_dmul+0x164>
   d5ffc:	340c      	adds	r4, #12
   d5ffe:	dc1b      	bgt.n	d6038 <__aeabi_dmul+0x134>
   d6000:	f104 0414 	add.w	r4, r4, #20
   d6004:	f1c4 0520 	rsb	r5, r4, #32
   d6008:	fa00 f305 	lsl.w	r3, r0, r5
   d600c:	fa20 f004 	lsr.w	r0, r0, r4
   d6010:	fa01 f205 	lsl.w	r2, r1, r5
   d6014:	ea40 0002 	orr.w	r0, r0, r2
   d6018:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d601c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6020:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6024:	fa21 f604 	lsr.w	r6, r1, r4
   d6028:	eb42 0106 	adc.w	r1, r2, r6
   d602c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6030:	bf08      	it	eq
   d6032:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6036:	bd70      	pop	{r4, r5, r6, pc}
   d6038:	f1c4 040c 	rsb	r4, r4, #12
   d603c:	f1c4 0520 	rsb	r5, r4, #32
   d6040:	fa00 f304 	lsl.w	r3, r0, r4
   d6044:	fa20 f005 	lsr.w	r0, r0, r5
   d6048:	fa01 f204 	lsl.w	r2, r1, r4
   d604c:	ea40 0002 	orr.w	r0, r0, r2
   d6050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6054:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6058:	f141 0100 	adc.w	r1, r1, #0
   d605c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6060:	bf08      	it	eq
   d6062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6066:	bd70      	pop	{r4, r5, r6, pc}
   d6068:	f1c4 0520 	rsb	r5, r4, #32
   d606c:	fa00 f205 	lsl.w	r2, r0, r5
   d6070:	ea4e 0e02 	orr.w	lr, lr, r2
   d6074:	fa20 f304 	lsr.w	r3, r0, r4
   d6078:	fa01 f205 	lsl.w	r2, r1, r5
   d607c:	ea43 0302 	orr.w	r3, r3, r2
   d6080:	fa21 f004 	lsr.w	r0, r1, r4
   d6084:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6088:	fa21 f204 	lsr.w	r2, r1, r4
   d608c:	ea20 0002 	bic.w	r0, r0, r2
   d6090:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6094:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6098:	bf08      	it	eq
   d609a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d609e:	bd70      	pop	{r4, r5, r6, pc}
   d60a0:	f094 0f00 	teq	r4, #0
   d60a4:	d10f      	bne.n	d60c6 <__aeabi_dmul+0x1c2>
   d60a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d60aa:	0040      	lsls	r0, r0, #1
   d60ac:	eb41 0101 	adc.w	r1, r1, r1
   d60b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d60b4:	bf08      	it	eq
   d60b6:	3c01      	subeq	r4, #1
   d60b8:	d0f7      	beq.n	d60aa <__aeabi_dmul+0x1a6>
   d60ba:	ea41 0106 	orr.w	r1, r1, r6
   d60be:	f095 0f00 	teq	r5, #0
   d60c2:	bf18      	it	ne
   d60c4:	4770      	bxne	lr
   d60c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d60ca:	0052      	lsls	r2, r2, #1
   d60cc:	eb43 0303 	adc.w	r3, r3, r3
   d60d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d60d4:	bf08      	it	eq
   d60d6:	3d01      	subeq	r5, #1
   d60d8:	d0f7      	beq.n	d60ca <__aeabi_dmul+0x1c6>
   d60da:	ea43 0306 	orr.w	r3, r3, r6
   d60de:	4770      	bx	lr
   d60e0:	ea94 0f0c 	teq	r4, ip
   d60e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d60e8:	bf18      	it	ne
   d60ea:	ea95 0f0c 	teqne	r5, ip
   d60ee:	d00c      	beq.n	d610a <__aeabi_dmul+0x206>
   d60f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60f4:	bf18      	it	ne
   d60f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d60fa:	d1d1      	bne.n	d60a0 <__aeabi_dmul+0x19c>
   d60fc:	ea81 0103 	eor.w	r1, r1, r3
   d6100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6104:	f04f 0000 	mov.w	r0, #0
   d6108:	bd70      	pop	{r4, r5, r6, pc}
   d610a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d610e:	bf06      	itte	eq
   d6110:	4610      	moveq	r0, r2
   d6112:	4619      	moveq	r1, r3
   d6114:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6118:	d019      	beq.n	d614e <__aeabi_dmul+0x24a>
   d611a:	ea94 0f0c 	teq	r4, ip
   d611e:	d102      	bne.n	d6126 <__aeabi_dmul+0x222>
   d6120:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6124:	d113      	bne.n	d614e <__aeabi_dmul+0x24a>
   d6126:	ea95 0f0c 	teq	r5, ip
   d612a:	d105      	bne.n	d6138 <__aeabi_dmul+0x234>
   d612c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6130:	bf1c      	itt	ne
   d6132:	4610      	movne	r0, r2
   d6134:	4619      	movne	r1, r3
   d6136:	d10a      	bne.n	d614e <__aeabi_dmul+0x24a>
   d6138:	ea81 0103 	eor.w	r1, r1, r3
   d613c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6140:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6144:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6148:	f04f 0000 	mov.w	r0, #0
   d614c:	bd70      	pop	{r4, r5, r6, pc}
   d614e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6152:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6156:	bd70      	pop	{r4, r5, r6, pc}

000d6158 <__aeabi_ddiv>:
   d6158:	b570      	push	{r4, r5, r6, lr}
   d615a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d615e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6162:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6166:	bf1d      	ittte	ne
   d6168:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d616c:	ea94 0f0c 	teqne	r4, ip
   d6170:	ea95 0f0c 	teqne	r5, ip
   d6174:	f000 f8a7 	bleq	d62c6 <__aeabi_ddiv+0x16e>
   d6178:	eba4 0405 	sub.w	r4, r4, r5
   d617c:	ea81 0e03 	eor.w	lr, r1, r3
   d6180:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6184:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6188:	f000 8088 	beq.w	d629c <__aeabi_ddiv+0x144>
   d618c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6190:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6194:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6198:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d619c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d61a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d61a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d61a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d61ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d61b0:	429d      	cmp	r5, r3
   d61b2:	bf08      	it	eq
   d61b4:	4296      	cmpeq	r6, r2
   d61b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d61ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d61be:	d202      	bcs.n	d61c6 <__aeabi_ddiv+0x6e>
   d61c0:	085b      	lsrs	r3, r3, #1
   d61c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d61c6:	1ab6      	subs	r6, r6, r2
   d61c8:	eb65 0503 	sbc.w	r5, r5, r3
   d61cc:	085b      	lsrs	r3, r3, #1
   d61ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d61d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d61d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d61da:	ebb6 0e02 	subs.w	lr, r6, r2
   d61de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61e2:	bf22      	ittt	cs
   d61e4:	1ab6      	subcs	r6, r6, r2
   d61e6:	4675      	movcs	r5, lr
   d61e8:	ea40 000c 	orrcs.w	r0, r0, ip
   d61ec:	085b      	lsrs	r3, r3, #1
   d61ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d61f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d61f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61fa:	bf22      	ittt	cs
   d61fc:	1ab6      	subcs	r6, r6, r2
   d61fe:	4675      	movcs	r5, lr
   d6200:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6204:	085b      	lsrs	r3, r3, #1
   d6206:	ea4f 0232 	mov.w	r2, r2, rrx
   d620a:	ebb6 0e02 	subs.w	lr, r6, r2
   d620e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6212:	bf22      	ittt	cs
   d6214:	1ab6      	subcs	r6, r6, r2
   d6216:	4675      	movcs	r5, lr
   d6218:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d621c:	085b      	lsrs	r3, r3, #1
   d621e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6222:	ebb6 0e02 	subs.w	lr, r6, r2
   d6226:	eb75 0e03 	sbcs.w	lr, r5, r3
   d622a:	bf22      	ittt	cs
   d622c:	1ab6      	subcs	r6, r6, r2
   d622e:	4675      	movcs	r5, lr
   d6230:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6234:	ea55 0e06 	orrs.w	lr, r5, r6
   d6238:	d018      	beq.n	d626c <__aeabi_ddiv+0x114>
   d623a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d623e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6242:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6246:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d624a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d624e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6252:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6256:	d1c0      	bne.n	d61da <__aeabi_ddiv+0x82>
   d6258:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d625c:	d10b      	bne.n	d6276 <__aeabi_ddiv+0x11e>
   d625e:	ea41 0100 	orr.w	r1, r1, r0
   d6262:	f04f 0000 	mov.w	r0, #0
   d6266:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d626a:	e7b6      	b.n	d61da <__aeabi_ddiv+0x82>
   d626c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6270:	bf04      	itt	eq
   d6272:	4301      	orreq	r1, r0
   d6274:	2000      	moveq	r0, #0
   d6276:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d627a:	bf88      	it	hi
   d627c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6280:	f63f aeaf 	bhi.w	d5fe2 <__aeabi_dmul+0xde>
   d6284:	ebb5 0c03 	subs.w	ip, r5, r3
   d6288:	bf04      	itt	eq
   d628a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d628e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6292:	f150 0000 	adcs.w	r0, r0, #0
   d6296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d629a:	bd70      	pop	{r4, r5, r6, pc}
   d629c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d62a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d62a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d62a8:	bfc2      	ittt	gt
   d62aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62b2:	bd70      	popgt	{r4, r5, r6, pc}
   d62b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62b8:	f04f 0e00 	mov.w	lr, #0
   d62bc:	3c01      	subs	r4, #1
   d62be:	e690      	b.n	d5fe2 <__aeabi_dmul+0xde>
   d62c0:	ea45 0e06 	orr.w	lr, r5, r6
   d62c4:	e68d      	b.n	d5fe2 <__aeabi_dmul+0xde>
   d62c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62ca:	ea94 0f0c 	teq	r4, ip
   d62ce:	bf08      	it	eq
   d62d0:	ea95 0f0c 	teqeq	r5, ip
   d62d4:	f43f af3b 	beq.w	d614e <__aeabi_dmul+0x24a>
   d62d8:	ea94 0f0c 	teq	r4, ip
   d62dc:	d10a      	bne.n	d62f4 <__aeabi_ddiv+0x19c>
   d62de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d62e2:	f47f af34 	bne.w	d614e <__aeabi_dmul+0x24a>
   d62e6:	ea95 0f0c 	teq	r5, ip
   d62ea:	f47f af25 	bne.w	d6138 <__aeabi_dmul+0x234>
   d62ee:	4610      	mov	r0, r2
   d62f0:	4619      	mov	r1, r3
   d62f2:	e72c      	b.n	d614e <__aeabi_dmul+0x24a>
   d62f4:	ea95 0f0c 	teq	r5, ip
   d62f8:	d106      	bne.n	d6308 <__aeabi_ddiv+0x1b0>
   d62fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62fe:	f43f aefd 	beq.w	d60fc <__aeabi_dmul+0x1f8>
   d6302:	4610      	mov	r0, r2
   d6304:	4619      	mov	r1, r3
   d6306:	e722      	b.n	d614e <__aeabi_dmul+0x24a>
   d6308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d630c:	bf18      	it	ne
   d630e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6312:	f47f aec5 	bne.w	d60a0 <__aeabi_dmul+0x19c>
   d6316:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d631a:	f47f af0d 	bne.w	d6138 <__aeabi_dmul+0x234>
   d631e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6322:	f47f aeeb 	bne.w	d60fc <__aeabi_dmul+0x1f8>
   d6326:	e712      	b.n	d614e <__aeabi_dmul+0x24a>

000d6328 <__gedf2>:
   d6328:	f04f 3cff 	mov.w	ip, #4294967295
   d632c:	e006      	b.n	d633c <__cmpdf2+0x4>
   d632e:	bf00      	nop

000d6330 <__ledf2>:
   d6330:	f04f 0c01 	mov.w	ip, #1
   d6334:	e002      	b.n	d633c <__cmpdf2+0x4>
   d6336:	bf00      	nop

000d6338 <__cmpdf2>:
   d6338:	f04f 0c01 	mov.w	ip, #1
   d633c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6340:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6344:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d634c:	bf18      	it	ne
   d634e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6352:	d01b      	beq.n	d638c <__cmpdf2+0x54>
   d6354:	b001      	add	sp, #4
   d6356:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d635a:	bf0c      	ite	eq
   d635c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6360:	ea91 0f03 	teqne	r1, r3
   d6364:	bf02      	ittt	eq
   d6366:	ea90 0f02 	teqeq	r0, r2
   d636a:	2000      	moveq	r0, #0
   d636c:	4770      	bxeq	lr
   d636e:	f110 0f00 	cmn.w	r0, #0
   d6372:	ea91 0f03 	teq	r1, r3
   d6376:	bf58      	it	pl
   d6378:	4299      	cmppl	r1, r3
   d637a:	bf08      	it	eq
   d637c:	4290      	cmpeq	r0, r2
   d637e:	bf2c      	ite	cs
   d6380:	17d8      	asrcs	r0, r3, #31
   d6382:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6386:	f040 0001 	orr.w	r0, r0, #1
   d638a:	4770      	bx	lr
   d638c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6394:	d102      	bne.n	d639c <__cmpdf2+0x64>
   d6396:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d639a:	d107      	bne.n	d63ac <__cmpdf2+0x74>
   d639c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d63a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63a4:	d1d6      	bne.n	d6354 <__cmpdf2+0x1c>
   d63a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d63aa:	d0d3      	beq.n	d6354 <__cmpdf2+0x1c>
   d63ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   d63b0:	4770      	bx	lr
   d63b2:	bf00      	nop

000d63b4 <__aeabi_cdrcmple>:
   d63b4:	4684      	mov	ip, r0
   d63b6:	4610      	mov	r0, r2
   d63b8:	4662      	mov	r2, ip
   d63ba:	468c      	mov	ip, r1
   d63bc:	4619      	mov	r1, r3
   d63be:	4663      	mov	r3, ip
   d63c0:	e000      	b.n	d63c4 <__aeabi_cdcmpeq>
   d63c2:	bf00      	nop

000d63c4 <__aeabi_cdcmpeq>:
   d63c4:	b501      	push	{r0, lr}
   d63c6:	f7ff ffb7 	bl	d6338 <__cmpdf2>
   d63ca:	2800      	cmp	r0, #0
   d63cc:	bf48      	it	mi
   d63ce:	f110 0f00 	cmnmi.w	r0, #0
   d63d2:	bd01      	pop	{r0, pc}

000d63d4 <__aeabi_dcmpeq>:
   d63d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63d8:	f7ff fff4 	bl	d63c4 <__aeabi_cdcmpeq>
   d63dc:	bf0c      	ite	eq
   d63de:	2001      	moveq	r0, #1
   d63e0:	2000      	movne	r0, #0
   d63e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d63e6:	bf00      	nop

000d63e8 <__aeabi_dcmplt>:
   d63e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63ec:	f7ff ffea 	bl	d63c4 <__aeabi_cdcmpeq>
   d63f0:	bf34      	ite	cc
   d63f2:	2001      	movcc	r0, #1
   d63f4:	2000      	movcs	r0, #0
   d63f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d63fa:	bf00      	nop

000d63fc <__aeabi_dcmple>:
   d63fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6400:	f7ff ffe0 	bl	d63c4 <__aeabi_cdcmpeq>
   d6404:	bf94      	ite	ls
   d6406:	2001      	movls	r0, #1
   d6408:	2000      	movhi	r0, #0
   d640a:	f85d fb08 	ldr.w	pc, [sp], #8
   d640e:	bf00      	nop

000d6410 <__aeabi_dcmpge>:
   d6410:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6414:	f7ff ffce 	bl	d63b4 <__aeabi_cdrcmple>
   d6418:	bf94      	ite	ls
   d641a:	2001      	movls	r0, #1
   d641c:	2000      	movhi	r0, #0
   d641e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6422:	bf00      	nop

000d6424 <__aeabi_dcmpgt>:
   d6424:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6428:	f7ff ffc4 	bl	d63b4 <__aeabi_cdrcmple>
   d642c:	bf34      	ite	cc
   d642e:	2001      	movcc	r0, #1
   d6430:	2000      	movcs	r0, #0
   d6432:	f85d fb08 	ldr.w	pc, [sp], #8
   d6436:	bf00      	nop

000d6438 <__aeabi_dcmpun>:
   d6438:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d643c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6440:	d102      	bne.n	d6448 <__aeabi_dcmpun+0x10>
   d6442:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6446:	d10a      	bne.n	d645e <__aeabi_dcmpun+0x26>
   d6448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d644c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6450:	d102      	bne.n	d6458 <__aeabi_dcmpun+0x20>
   d6452:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6456:	d102      	bne.n	d645e <__aeabi_dcmpun+0x26>
   d6458:	f04f 0000 	mov.w	r0, #0
   d645c:	4770      	bx	lr
   d645e:	f04f 0001 	mov.w	r0, #1
   d6462:	4770      	bx	lr

000d6464 <__aeabi_d2iz>:
   d6464:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6468:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d646c:	d215      	bcs.n	d649a <__aeabi_d2iz+0x36>
   d646e:	d511      	bpl.n	d6494 <__aeabi_d2iz+0x30>
   d6470:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6474:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6478:	d912      	bls.n	d64a0 <__aeabi_d2iz+0x3c>
   d647a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d647e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6482:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6486:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d648a:	fa23 f002 	lsr.w	r0, r3, r2
   d648e:	bf18      	it	ne
   d6490:	4240      	negne	r0, r0
   d6492:	4770      	bx	lr
   d6494:	f04f 0000 	mov.w	r0, #0
   d6498:	4770      	bx	lr
   d649a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d649e:	d105      	bne.n	d64ac <__aeabi_d2iz+0x48>
   d64a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d64a4:	bf08      	it	eq
   d64a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d64aa:	4770      	bx	lr
   d64ac:	f04f 0000 	mov.w	r0, #0
   d64b0:	4770      	bx	lr
   d64b2:	bf00      	nop

000d64b4 <__aeabi_d2uiz>:
   d64b4:	004a      	lsls	r2, r1, #1
   d64b6:	d211      	bcs.n	d64dc <__aeabi_d2uiz+0x28>
   d64b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d64bc:	d211      	bcs.n	d64e2 <__aeabi_d2uiz+0x2e>
   d64be:	d50d      	bpl.n	d64dc <__aeabi_d2uiz+0x28>
   d64c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d64c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d64c8:	d40e      	bmi.n	d64e8 <__aeabi_d2uiz+0x34>
   d64ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d64ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d64d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d64d6:	fa23 f002 	lsr.w	r0, r3, r2
   d64da:	4770      	bx	lr
   d64dc:	f04f 0000 	mov.w	r0, #0
   d64e0:	4770      	bx	lr
   d64e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d64e6:	d102      	bne.n	d64ee <__aeabi_d2uiz+0x3a>
   d64e8:	f04f 30ff 	mov.w	r0, #4294967295
   d64ec:	4770      	bx	lr
   d64ee:	f04f 0000 	mov.w	r0, #0
   d64f2:	4770      	bx	lr

000d64f4 <__aeabi_d2f>:
   d64f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d64f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d64fc:	bf24      	itt	cs
   d64fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6502:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6506:	d90d      	bls.n	d6524 <__aeabi_d2f+0x30>
   d6508:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d650c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6510:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6514:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6518:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d651c:	bf08      	it	eq
   d651e:	f020 0001 	biceq.w	r0, r0, #1
   d6522:	4770      	bx	lr
   d6524:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6528:	d121      	bne.n	d656e <__aeabi_d2f+0x7a>
   d652a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d652e:	bfbc      	itt	lt
   d6530:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6534:	4770      	bxlt	lr
   d6536:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d653a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d653e:	f1c2 0218 	rsb	r2, r2, #24
   d6542:	f1c2 0c20 	rsb	ip, r2, #32
   d6546:	fa10 f30c 	lsls.w	r3, r0, ip
   d654a:	fa20 f002 	lsr.w	r0, r0, r2
   d654e:	bf18      	it	ne
   d6550:	f040 0001 	orrne.w	r0, r0, #1
   d6554:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6558:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d655c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6560:	ea40 000c 	orr.w	r0, r0, ip
   d6564:	fa23 f302 	lsr.w	r3, r3, r2
   d6568:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d656c:	e7cc      	b.n	d6508 <__aeabi_d2f+0x14>
   d656e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6572:	d107      	bne.n	d6584 <__aeabi_d2f+0x90>
   d6574:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6578:	bf1e      	ittt	ne
   d657a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d657e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6582:	4770      	bxne	lr
   d6584:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6588:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d658c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6590:	4770      	bx	lr
   d6592:	bf00      	nop

000d6594 <atexit>:
   d6594:	2300      	movs	r3, #0
   d6596:	4601      	mov	r1, r0
   d6598:	461a      	mov	r2, r3
   d659a:	4618      	mov	r0, r3
   d659c:	f000 b842 	b.w	d6624 <__register_exitproc>

000d65a0 <memcpy>:
   d65a0:	440a      	add	r2, r1
   d65a2:	4291      	cmp	r1, r2
   d65a4:	f100 33ff 	add.w	r3, r0, #4294967295
   d65a8:	d100      	bne.n	d65ac <memcpy+0xc>
   d65aa:	4770      	bx	lr
   d65ac:	b510      	push	{r4, lr}
   d65ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d65b2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d65b6:	4291      	cmp	r1, r2
   d65b8:	d1f9      	bne.n	d65ae <memcpy+0xe>
   d65ba:	bd10      	pop	{r4, pc}

000d65bc <memset>:
   d65bc:	4402      	add	r2, r0
   d65be:	4603      	mov	r3, r0
   d65c0:	4293      	cmp	r3, r2
   d65c2:	d100      	bne.n	d65c6 <memset+0xa>
   d65c4:	4770      	bx	lr
   d65c6:	f803 1b01 	strb.w	r1, [r3], #1
   d65ca:	e7f9      	b.n	d65c0 <memset+0x4>

000d65cc <srand>:
   d65cc:	b538      	push	{r3, r4, r5, lr}
   d65ce:	4b0d      	ldr	r3, [pc, #52]	; (d6604 <srand+0x38>)
   d65d0:	681d      	ldr	r5, [r3, #0]
   d65d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d65d4:	4604      	mov	r4, r0
   d65d6:	b97b      	cbnz	r3, d65f8 <srand+0x2c>
   d65d8:	2018      	movs	r0, #24
   d65da:	f7fe fc45 	bl	d4e68 <malloc>
   d65de:	4a0a      	ldr	r2, [pc, #40]	; (d6608 <srand+0x3c>)
   d65e0:	4b0a      	ldr	r3, [pc, #40]	; (d660c <srand+0x40>)
   d65e2:	63a8      	str	r0, [r5, #56]	; 0x38
   d65e4:	e9c0 2300 	strd	r2, r3, [r0]
   d65e8:	4b09      	ldr	r3, [pc, #36]	; (d6610 <srand+0x44>)
   d65ea:	6083      	str	r3, [r0, #8]
   d65ec:	230b      	movs	r3, #11
   d65ee:	8183      	strh	r3, [r0, #12]
   d65f0:	2201      	movs	r2, #1
   d65f2:	2300      	movs	r3, #0
   d65f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d65f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d65fa:	2200      	movs	r2, #0
   d65fc:	611c      	str	r4, [r3, #16]
   d65fe:	615a      	str	r2, [r3, #20]
   d6600:	bd38      	pop	{r3, r4, r5, pc}
   d6602:	bf00      	nop
   d6604:	2003e5d4 	.word	0x2003e5d4
   d6608:	abcd330e 	.word	0xabcd330e
   d660c:	e66d1234 	.word	0xe66d1234
   d6610:	0005deec 	.word	0x0005deec

000d6614 <strlen>:
   d6614:	4603      	mov	r3, r0
   d6616:	f813 2b01 	ldrb.w	r2, [r3], #1
   d661a:	2a00      	cmp	r2, #0
   d661c:	d1fb      	bne.n	d6616 <strlen+0x2>
   d661e:	1a18      	subs	r0, r3, r0
   d6620:	3801      	subs	r0, #1
   d6622:	4770      	bx	lr

000d6624 <__register_exitproc>:
   d6624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6628:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d66e4 <__register_exitproc+0xc0>
   d662c:	4606      	mov	r6, r0
   d662e:	f8d8 0000 	ldr.w	r0, [r8]
   d6632:	461f      	mov	r7, r3
   d6634:	460d      	mov	r5, r1
   d6636:	4691      	mov	r9, r2
   d6638:	f000 f856 	bl	d66e8 <__retarget_lock_acquire_recursive>
   d663c:	4b25      	ldr	r3, [pc, #148]	; (d66d4 <__register_exitproc+0xb0>)
   d663e:	681c      	ldr	r4, [r3, #0]
   d6640:	b934      	cbnz	r4, d6650 <__register_exitproc+0x2c>
   d6642:	4c25      	ldr	r4, [pc, #148]	; (d66d8 <__register_exitproc+0xb4>)
   d6644:	601c      	str	r4, [r3, #0]
   d6646:	4b25      	ldr	r3, [pc, #148]	; (d66dc <__register_exitproc+0xb8>)
   d6648:	b113      	cbz	r3, d6650 <__register_exitproc+0x2c>
   d664a:	681b      	ldr	r3, [r3, #0]
   d664c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6650:	6863      	ldr	r3, [r4, #4]
   d6652:	2b1f      	cmp	r3, #31
   d6654:	dd07      	ble.n	d6666 <__register_exitproc+0x42>
   d6656:	f8d8 0000 	ldr.w	r0, [r8]
   d665a:	f000 f847 	bl	d66ec <__retarget_lock_release_recursive>
   d665e:	f04f 30ff 	mov.w	r0, #4294967295
   d6662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6666:	b34e      	cbz	r6, d66bc <__register_exitproc+0x98>
   d6668:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d666c:	b988      	cbnz	r0, d6692 <__register_exitproc+0x6e>
   d666e:	4b1c      	ldr	r3, [pc, #112]	; (d66e0 <__register_exitproc+0xbc>)
   d6670:	b923      	cbnz	r3, d667c <__register_exitproc+0x58>
   d6672:	f8d8 0000 	ldr.w	r0, [r8]
   d6676:	f000 f838 	bl	d66ea <__retarget_lock_release>
   d667a:	e7f0      	b.n	d665e <__register_exitproc+0x3a>
   d667c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6680:	f7fe fbf2 	bl	d4e68 <malloc>
   d6684:	2800      	cmp	r0, #0
   d6686:	d0f4      	beq.n	d6672 <__register_exitproc+0x4e>
   d6688:	2300      	movs	r3, #0
   d668a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d668e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d6692:	6863      	ldr	r3, [r4, #4]
   d6694:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6698:	2201      	movs	r2, #1
   d669a:	409a      	lsls	r2, r3
   d669c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d66a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d66a4:	4313      	orrs	r3, r2
   d66a6:	2e02      	cmp	r6, #2
   d66a8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d66ac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d66b0:	bf02      	ittt	eq
   d66b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d66b6:	431a      	orreq	r2, r3
   d66b8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d66bc:	6863      	ldr	r3, [r4, #4]
   d66be:	f8d8 0000 	ldr.w	r0, [r8]
   d66c2:	1c5a      	adds	r2, r3, #1
   d66c4:	3302      	adds	r3, #2
   d66c6:	6062      	str	r2, [r4, #4]
   d66c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d66cc:	f000 f80e 	bl	d66ec <__retarget_lock_release_recursive>
   d66d0:	2000      	movs	r0, #0
   d66d2:	e7c6      	b.n	d6662 <__register_exitproc+0x3e>
   d66d4:	2003e7e4 	.word	0x2003e7e4
   d66d8:	2003e758 	.word	0x2003e758
   d66dc:	00000000 	.word	0x00000000
   d66e0:	000d4e69 	.word	0x000d4e69
   d66e4:	2003e638 	.word	0x2003e638

000d66e8 <__retarget_lock_acquire_recursive>:
   d66e8:	4770      	bx	lr

000d66ea <__retarget_lock_release>:
   d66ea:	4770      	bx	lr

000d66ec <__retarget_lock_release_recursive>:
   d66ec:	4770      	bx	lr

000d66ee <link_code_end>:
	...

000d66f0 <dynalib_user>:
   d66f0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d6700:	0000 0000 002d 203a 4900 766e 6c61 6469     ....-.: .Invalid
   d6710:	7220 6165 6964 676e 2f00 3a00 0000 0000      reading./.:....

000d6720 <_ZTVN5spark13EthernetClassE>:
	...
   d6728:	4f07 000d 4efd 000d 4ef3 000d 4ee9 000d     .O...N...N...N..
   d6738:	4edd 000d 4ed1 000d 5919 000d 5921 000d     .N...N...Y..!Y..
   d6748:	4ec5 000d 4ebd 000d 4eb3 000d 4ea9 000d     .N...N...N...N..
   d6758:	5951 000d 616e 006e 6e69 0066 766f 0066     QY..nan.inf.ovf.
   d6768:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   d6778:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6788:	0065 0000                                   e...

000d678c <_ZTV9IPAddress>:
	...
   d6794:	54dd 000d 54cd 000d 54cf 000d               .T...T...T..

000d67a0 <_ZTV9USBSerial>:
	...
   d67a8:	55b5 000d 561d 000d 55f3 000d 4f6d 000d     .U...V...U..mO..
   d67b8:	55e5 000d 55b7 000d 55c7 000d 5617 000d     .U...U...U...V..
   d67c8:	55d7 000d 55af 000d                         .U...U..

000d67d0 <_ZTV11USARTSerial>:
	...
   d67d8:	56b9 000d 5727 000d 56ff 000d 4f6d 000d     .V..'W...V..mO..
   d67e8:	56cf 000d 56eb 000d 56dd 000d 56f9 000d     .V...V...V...V..
   d67f8:	56bb 000d 56c1 000d                         .V...V..

000d6800 <_ZTV7TwoWire>:
	...
   d6808:	57e1 000d 582b 000d 5803 000d 57e3 000d     .W..+X...X...W..
   d6818:	580b 000d 5813 000d 581b 000d 5823 000d     .X...X...X..#X..

000d6828 <_ZTVN5spark9WiFiClassE>:
	...
   d6830:	58bb 000d 58b1 000d 58a7 000d 585d 000d     .X...X...X..]X..
   d6840:	589b 000d 588f 000d 5919 000d 5921 000d     .X...X...Y..!Y..
   d6850:	5883 000d 587b 000d 5871 000d 5867 000d     .X..{X..qX..gX..
   d6860:	5951 000d                                   QY..

000d6864 <_ZTVN5spark12NetworkClassE>:
	...
   d686c:	58d9 000d 58e3 000d 58ed 000d 58f7 000d     .X...X...X...X..
   d687c:	5901 000d 590d 000d 5919 000d 5921 000d     .Y...Y...Y..!Y..
   d688c:	5929 000d 5935 000d 593d 000d 5947 000d     )Y..5Y..=Y..GY..
   d689c:	5951 000d                                   QY..

000d68a0 <_ZSt7nothrow>:
	...

000d68a1 <link_const_variable_data_end>:
   d68a1:	00          	.byte	0x00
	...

000d68a4 <link_constructors_location>:
   d68a4:	000d4379 	.word	0x000d4379
   d68a8:	000d4f11 	.word	0x000d4f11
   d68ac:	000d4f39 	.word	0x000d4f39
   d68b0:	000d4f5d 	.word	0x000d4f5d
   d68b4:	000d51dd 	.word	0x000d51dd
   d68b8:	000d536d 	.word	0x000d536d
   d68bc:	000d5389 	.word	0x000d5389
   d68c0:	000d58c5 	.word	0x000d58c5
   d68c4:	000d5a25 	.word	0x000d5a25

000d68c8 <link_constructors_end>:
	...
